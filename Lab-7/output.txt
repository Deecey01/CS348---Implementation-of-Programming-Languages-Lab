Parsing...
(Line No. 1) Reduction: type_specifier --> integer (Integer type)
(Line No. 1) Reduction: type_specifier --> integer (Integer type)
(Line No. 1) Reduction: parameter_declaration --> type_specifier IDENTIFIER (Parameter with type and name)
(Line No. 1) Reduction: parameter_list --> parameter_declaration (First parameter in function)
(Line No. 1) Reduction: function_declarator --> IDENTIFIER ( parameter_list ) (Function declarator with parameters)
(Line No. 2) Reduction: primary_expression --> IDENTIFIER (An identifier reference)
(Line No. 2) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 2) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 2) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 2) Reduction: primary_expression --> IDENTIFIER (An identifier reference)
(Line No. 2) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 2) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 2) Reduction: multiplicative_expression --> multiplicative_expression * unary_expression (Multiplication operation)
(Line No. 2) Reduction: additive_expression --> multiplicative_expression (Expression without addition/subtraction)
(Line No. 2) Reduction: relational_expression --> additive_expression (Expression without comparison)
(Line No. 2) Reduction: equality_expression --> relational_expression (Expression without equality check)
(Line No. 2) Reduction: logical_and_expression --> equality_expression (Expression without logical AND)
(Line No. 2) Reduction: logical_or_expression --> logical_and_expression (Expression without logical OR)
(Line No. 2) Reduction: conditional_expression --> logical_or_expression (Expression without conditional operator)
(Line No. 2) Reduction: assignment_expression --> conditional_expression (Expression without assignment)
(Line No. 2) Reduction: expression --> assignment_expression (Complete expression)
(Line No. 2) Reduction: jump_statement --> return expression ;
(Line No. 2) Reduction: statement --> jump_statement (Jump/return statement)
(Line No. 2) Reduction: block_item --> statement (Statement in block)
(Line No. 2) Reduction: block_item_list --> block_item (First item in block)
(Line No. 3) Reduction: compound_statement --> begin block_item_list end (Block with items)
(Line No. 3) Reduction: function_definition --> type_specifier function_declarator compound_statement
(Line No. 3) Reduction: translation_unit --> function_definition
(Line No. 5) Reduction: type_specifier --> integer (Integer type)
(Line No. 5) Reduction: type_specifier --> integer (Integer type)
(Line No. 5) Reduction: parameter_declaration --> type_specifier IDENTIFIER (Parameter with type and name)
(Line No. 5) Reduction: parameter_list --> parameter_declaration (First parameter in function)
(Line No. 5) Reduction: function_declarator --> IDENTIFIER ( parameter_list ) (Function declarator with parameters)
(Line No. 6) Reduction: type_specifier --> integer (Integer type)
(Line No. 6) Reduction: direct_declarator --> IDENTIFIER (Simple identifier)
(Line No. 6) Reduction: declarator --> direct_declarator (Non-pointer declarator)
(Line No. 6) Reduction: primary_expression --> INTEGER_CONSTANT (An integer literal)
(Line No. 6) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 6) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 6) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 6) Reduction: additive_expression --> multiplicative_expression (Expression without addition/subtraction)
(Line No. 6) Reduction: relational_expression --> additive_expression (Expression without comparison)
(Line No. 6) Reduction: equality_expression --> relational_expression (Expression without equality check)
(Line No. 6) Reduction: logical_and_expression --> equality_expression (Expression without logical AND)
(Line No. 6) Reduction: logical_or_expression --> logical_and_expression (Expression without logical OR)
(Line No. 6) Reduction: conditional_expression --> logical_or_expression (Expression without conditional operator)
(Line No. 6) Reduction: assignment_expression --> conditional_expression (Expression without assignment)
(Line No. 6) Reduction: initializer --> assignment_expression (Initializer expression)
(Line No. 6) Reduction: init_declarator --> declarator = initializer (Declaration with initialization)
(Line No. 6) Reduction: declaration --> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 6) Reduction: block_item --> declaration (Declaration in block)
(Line No. 6) Reduction: block_item_list --> block_item (First item in block)
(Line No. 7) Reduction: primary_expression --> IDENTIFIER (An identifier reference)
(Line No. 7) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 7) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 7) Reduction: primary_expression --> INTEGER_CONSTANT (An integer literal)
(Line No. 7) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 7) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 7) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 7) Reduction: additive_expression --> multiplicative_expression (Expression without addition/subtraction)
(Line No. 7) Reduction: relational_expression --> additive_expression (Expression without comparison)
(Line No. 7) Reduction: equality_expression --> relational_expression (Expression without equality check)
(Line No. 7) Reduction: logical_and_expression --> equality_expression (Expression without logical AND)
(Line No. 7) Reduction: logical_or_expression --> logical_and_expression (Expression without logical OR)
(Line No. 7) Reduction: conditional_expression --> logical_or_expression (Expression without conditional operator)
(Line No. 7) Reduction: assignment_expression --> conditional_expression (Expression without assignment)
(Line No. 7) Reduction: assignment_expression --> unary_expression = assignment_expression (Assignment operation)
(Line No. 7) Reduction: expression --> assignment_expression (Complete expression)
(Line No. 7) Reduction: expression_statement --> expression ; (Expression statement)
(Line No. 7) Reduction: primary_expression --> IDENTIFIER (An identifier reference)
(Line No. 7) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 7) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 7) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 7) Reduction: additive_expression --> multiplicative_expression (Expression without addition/subtraction)
(Line No. 7) Reduction: relational_expression --> additive_expression (Expression without comparison)
(Line No. 7) Reduction: primary_expression --> INTEGER_CONSTANT (An integer literal)
(Line No. 7) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 7) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 7) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 7) Reduction: additive_expression --> multiplicative_expression (Expression without addition/subtraction)
(Line No. 7) Reduction: relational_expression --> relational_expression < additive_expression (Less than comparison)
(Line No. 7) Reduction: equality_expression --> relational_expression (Expression without equality check)
(Line No. 7) Reduction: logical_and_expression --> equality_expression (Expression without logical AND)
(Line No. 7) Reduction: logical_or_expression --> logical_and_expression (Expression without logical OR)
(Line No. 7) Reduction: conditional_expression --> logical_or_expression (Expression without conditional operator)
(Line No. 7) Reduction: assignment_expression --> conditional_expression (Expression without assignment)
(Line No. 7) Reduction: expression --> assignment_expression (Complete expression)
(Line No. 7) Reduction: expression_statement --> expression ; (Expression statement)
(Line No. 7) Reduction: primary_expression --> IDENTIFIER (An identifier reference)
(Line No. 7) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 7) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 7) Reduction: primary_expression --> IDENTIFIER (An identifier reference)
(Line No. 7) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 7) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 7) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 7) Reduction: additive_expression --> multiplicative_expression (Expression without addition/subtraction)
(Line No. 7) Reduction: primary_expression --> INTEGER_CONSTANT (An integer literal)
(Line No. 7) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 7) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 7) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 7) Reduction: additive_expression --> additive_expression + multiplicative_expression (Addition operation)
(Line No. 7) Reduction: relational_expression --> additive_expression (Expression without comparison)
(Line No. 7) Reduction: equality_expression --> relational_expression (Expression without equality check)
(Line No. 7) Reduction: logical_and_expression --> equality_expression (Expression without logical AND)
(Line No. 7) Reduction: logical_or_expression --> logical_and_expression (Expression without logical OR)
(Line No. 7) Reduction: conditional_expression --> logical_or_expression (Expression without conditional operator)
(Line No. 7) Reduction: assignment_expression --> conditional_expression (Expression without assignment)
(Line No. 7) Reduction: assignment_expression --> unary_expression = assignment_expression (Assignment operation)
(Line No. 7) Reduction: expression --> assignment_expression (Complete expression)
(Line No. 8) Reduction: primary_expression --> IDENTIFIER (An identifier reference)
(Line No. 8) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 8) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 8) Reduction: primary_expression --> IDENTIFIER (An identifier reference)
(Line No. 8) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 8) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 8) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 8) Reduction: additive_expression --> multiplicative_expression (Expression without addition/subtraction)
(Line No. 8) Reduction: primary_expression --> IDENTIFIER (An identifier reference)
(Line No. 8) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 8) Reduction: primary_expression --> IDENTIFIER (An identifier reference)
(Line No. 8) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 8) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 8) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 8) Reduction: additive_expression --> multiplicative_expression (Expression without addition/subtraction)
(Line No. 8) Reduction: relational_expression --> additive_expression (Expression without comparison)
(Line No. 8) Reduction: equality_expression --> relational_expression (Expression without equality check)
(Line No. 8) Reduction: logical_and_expression --> equality_expression (Expression without logical AND)
(Line No. 8) Reduction: logical_or_expression --> logical_and_expression (Expression without logical OR)
(Line No. 8) Reduction: conditional_expression --> logical_or_expression (Expression without conditional operator)
(Line No. 8) Reduction: assignment_expression --> conditional_expression (Expression without assignment)
(Line No. 8) Reduction: expression --> assignment_expression (Complete expression)
(Line No. 8) Reduction: postfix_expression --> postfix_expression [ expression ] (Array access)
(Line No. 8) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 8) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 8) Reduction: additive_expression --> additive_expression + multiplicative_expression (Addition operation)
(Line No. 8) Reduction: relational_expression --> additive_expression (Expression without comparison)
(Line No. 8) Reduction: equality_expression --> relational_expression (Expression without equality check)
(Line No. 8) Reduction: logical_and_expression --> equality_expression (Expression without logical AND)
(Line No. 8) Reduction: logical_or_expression --> logical_and_expression (Expression without logical OR)
(Line No. 8) Reduction: conditional_expression --> logical_or_expression (Expression without conditional operator)
(Line No. 8) Reduction: assignment_expression --> conditional_expression (Expression without assignment)
(Line No. 8) Reduction: assignment_expression --> unary_expression = assignment_expression (Assignment operation)
(Line No. 8) Reduction: expression --> assignment_expression (Complete expression)
(Line No. 8) Reduction: expression_statement --> expression ; (Expression statement)
(Line No. 8) Reduction: statement --> expression_statement (Expression statement)
(Line No. 8) Reduction: block_item --> statement (Statement in block)
(Line No. 8) Reduction: block_item_list --> block_item (First item in block)
(Line No. 9) Reduction: compound_statement --> begin block_item_list end (Block with items)
(Line No. 9) Reduction: statement --> compound_statement (Block statement)
(Line No. 9) Reduction: iteration_statement --> for ( expression_statement expression_statement expression ) statement (For loop with update)
(Line No. 9) Reduction: statement --> iteration_statement (Loop statement)
(Line No. 9) Reduction: block_item --> statement (Statement in block)
(Line No. 9) Reduction: block_item_list --> block_item_list block_item (Additional item in block)
(Line No. 10) Reduction: primary_expression --> IDENTIFIER (An identifier reference)
(Line No. 10) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 10) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 10) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 10) Reduction: additive_expression --> multiplicative_expression (Expression without addition/subtraction)
(Line No. 10) Reduction: relational_expression --> additive_expression (Expression without comparison)
(Line No. 10) Reduction: equality_expression --> relational_expression (Expression without equality check)
(Line No. 10) Reduction: logical_and_expression --> equality_expression (Expression without logical AND)
(Line No. 10) Reduction: logical_or_expression --> logical_and_expression (Expression without logical OR)
(Line No. 10) Reduction: conditional_expression --> logical_or_expression (Expression without conditional operator)
(Line No. 10) Reduction: assignment_expression --> conditional_expression (Expression without assignment)
(Line No. 10) Reduction: expression --> assignment_expression (Complete expression)
(Line No. 10) Reduction: jump_statement --> return expression ;
(Line No. 10) Reduction: statement --> jump_statement (Jump/return statement)
(Line No. 10) Reduction: block_item --> statement (Statement in block)
(Line No. 10) Reduction: block_item_list --> block_item_list block_item (Additional item in block)
(Line No. 11) Reduction: compound_statement --> begin block_item_list end (Block with items)
(Line No. 11) Reduction: function_definition --> type_specifier function_declarator compound_statement
(Line No. 11) Reduction: translation_unit --> translation_unit function_definition
(Line No. 13) Reduction: type_specifier --> integer (Integer type)
(Line No. 13) Reduction: function_declarator --> IDENTIFIER ( ) (Function declarator without parameters)
(Line No. 14) Reduction: type_specifier --> integer (Integer type)
(Line No. 14) Reduction: direct_declarator --> IDENTIFIER (Simple identifier)
(Line No. 14) Reduction: declarator --> direct_declarator (Non-pointer declarator)
(Line No. 14) Reduction: init_declarator --> declarator (Declaration without initialization)
(Line No. 14) Reduction: declaration --> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 14) Reduction: block_item --> declaration (Declaration in block)
(Line No. 14) Reduction: block_item_list --> block_item (First item in block)
(Line No. 15) Reduction: type_specifier --> integer (Integer type)
(Line No. 15) Reduction: direct_declarator --> IDENTIFIER (Simple identifier)
(Line No. 15) Reduction: declarator --> direct_declarator (Non-pointer declarator)
(Line No. 15) Reduction: primary_expression --> INTEGER_CONSTANT (An integer literal)
(Line No. 15) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 15) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 15) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 15) Reduction: additive_expression --> multiplicative_expression (Expression without addition/subtraction)
(Line No. 15) Reduction: relational_expression --> additive_expression (Expression without comparison)
(Line No. 15) Reduction: equality_expression --> relational_expression (Expression without equality check)
(Line No. 15) Reduction: logical_and_expression --> equality_expression (Expression without logical AND)
(Line No. 15) Reduction: logical_or_expression --> logical_and_expression (Expression without logical OR)
(Line No. 15) Reduction: conditional_expression --> logical_or_expression (Expression without conditional operator)
(Line No. 15) Reduction: assignment_expression --> conditional_expression (Expression without assignment)
(Line No. 15) Reduction: initializer --> assignment_expression (Initializer expression)
(Line No. 15) Reduction: init_declarator --> declarator = initializer (Declaration with initialization)
(Line No. 15) Reduction: declaration --> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 15) Reduction: block_item --> declaration (Declaration in block)
(Line No. 15) Reduction: block_item_list --> block_item_list block_item (Additional item in block)
(Line No. 16) Reduction: primary_expression --> IDENTIFIER (An identifier reference)
(Line No. 16) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 16) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 16) Reduction: primary_expression --> IDENTIFIER (An identifier reference)
(Line No. 16) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 16) Reduction: primary_expression --> INTEGER_CONSTANT (An integer literal)
(Line No. 16) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 16) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 16) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 16) Reduction: additive_expression --> multiplicative_expression (Expression without addition/subtraction)
(Line No. 16) Reduction: relational_expression --> additive_expression (Expression without comparison)
(Line No. 16) Reduction: equality_expression --> relational_expression (Expression without equality check)
(Line No. 16) Reduction: logical_and_expression --> equality_expression (Expression without logical AND)
(Line No. 16) Reduction: logical_or_expression --> logical_and_expression (Expression without logical OR)
(Line No. 16) Reduction: conditional_expression --> logical_or_expression (Expression without conditional operator)
(Line No. 16) Reduction: assignment_expression --> conditional_expression (Expression without assignment)
(Line No. 16) Reduction: argument_expression_list --> assignment_expression (First argument in function call)
(Line No. 16) Reduction: postfix_expression --> postfix_expression ( argument_expression_list ) (Function call with arguments)
(Line No. 16) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 16) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 16) Reduction: additive_expression --> multiplicative_expression (Expression without addition/subtraction)
(Line No. 16) Reduction: relational_expression --> additive_expression (Expression without comparison)
(Line No. 16) Reduction: equality_expression --> relational_expression (Expression without equality check)
(Line No. 16) Reduction: logical_and_expression --> equality_expression (Expression without logical AND)
(Line No. 16) Reduction: logical_or_expression --> logical_and_expression (Expression without logical OR)
(Line No. 16) Reduction: conditional_expression --> logical_or_expression (Expression without conditional operator)
(Line No. 16) Reduction: assignment_expression --> conditional_expression (Expression without assignment)
(Line No. 16) Reduction: assignment_expression --> unary_expression = assignment_expression (Assignment operation)
(Line No. 16) Reduction: expression --> assignment_expression (Complete expression)
(Line No. 16) Reduction: expression_statement --> expression ; (Expression statement)
(Line No. 16) Reduction: statement --> expression_statement (Expression statement)
(Line No. 16) Reduction: block_item --> statement (Statement in block)
(Line No. 16) Reduction: block_item_list --> block_item_list block_item (Additional item in block)
(Line No. 17) Reduction: type_specifier --> integer (Integer type)
(Line No. 17) Reduction: direct_declarator --> IDENTIFIER (Simple identifier)
(Line No. 17) Reduction: declarator --> direct_declarator (Non-pointer declarator)
(Line No. 17) Reduction: init_declarator --> declarator (Declaration without initialization)
(Line No. 17) Reduction: declaration --> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 17) Reduction: block_item --> declaration (Declaration in block)
(Line No. 17) Reduction: block_item_list --> block_item_list block_item (Additional item in block)
(Line No. 18) Reduction: type_specifier --> integer (Integer type)
(Line No. 18) Reduction: direct_declarator --> IDENTIFIER [ INTEGER_CONSTANT ] (Array declarator)
(Line No. 18) Reduction: declarator --> direct_declarator (Non-pointer declarator)
(Line No. 18) Reduction: init_declarator --> declarator (Declaration without initialization)
(Line No. 18) Reduction: declaration --> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 18) Reduction: block_item --> declaration (Declaration in block)
(Line No. 18) Reduction: block_item_list --> block_item_list block_item (Additional item in block)
(Line No. 19) Reduction: primary_expression --> IDENTIFIER (An identifier reference)
(Line No. 19) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 19) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 19) Reduction: primary_expression --> INTEGER_CONSTANT (An integer literal)
(Line No. 19) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 19) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 19) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 19) Reduction: additive_expression --> multiplicative_expression (Expression without addition/subtraction)
(Line No. 19) Reduction: relational_expression --> additive_expression (Expression without comparison)
(Line No. 19) Reduction: equality_expression --> relational_expression (Expression without equality check)
(Line No. 19) Reduction: logical_and_expression --> equality_expression (Expression without logical AND)
(Line No. 19) Reduction: logical_or_expression --> logical_and_expression (Expression without logical OR)
(Line No. 19) Reduction: conditional_expression --> logical_or_expression (Expression without conditional operator)
(Line No. 19) Reduction: assignment_expression --> conditional_expression (Expression without assignment)
(Line No. 19) Reduction: assignment_expression --> unary_expression = assignment_expression (Assignment operation)
(Line No. 19) Reduction: expression --> assignment_expression (Complete expression)
(Line No. 19) Reduction: expression_statement --> expression ; (Expression statement)
(Line No. 19) Reduction: primary_expression --> IDENTIFIER (An identifier reference)
(Line No. 19) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 19) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 19) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 19) Reduction: additive_expression --> multiplicative_expression (Expression without addition/subtraction)
(Line No. 19) Reduction: relational_expression --> additive_expression (Expression without comparison)
(Line No. 19) Reduction: primary_expression --> INTEGER_CONSTANT (An integer literal)
(Line No. 19) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 19) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 19) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 19) Reduction: additive_expression --> multiplicative_expression (Expression without addition/subtraction)
(Line No. 19) Reduction: relational_expression --> relational_expression < additive_expression (Less than comparison)
(Line No. 19) Reduction: equality_expression --> relational_expression (Expression without equality check)
(Line No. 19) Reduction: logical_and_expression --> equality_expression (Expression without logical AND)
(Line No. 19) Reduction: logical_or_expression --> logical_and_expression (Expression without logical OR)
(Line No. 19) Reduction: conditional_expression --> logical_or_expression (Expression without conditional operator)
(Line No. 19) Reduction: assignment_expression --> conditional_expression (Expression without assignment)
(Line No. 19) Reduction: expression --> assignment_expression (Complete expression)
(Line No. 19) Reduction: expression_statement --> expression ; (Expression statement)
(Line No. 19) Reduction: primary_expression --> IDENTIFIER (An identifier reference)
(Line No. 19) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 19) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 19) Reduction: primary_expression --> IDENTIFIER (An identifier reference)
(Line No. 19) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 19) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 19) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 19) Reduction: additive_expression --> multiplicative_expression (Expression without addition/subtraction)
(Line No. 19) Reduction: primary_expression --> INTEGER_CONSTANT (An integer literal)
(Line No. 19) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 19) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 19) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 19) Reduction: additive_expression --> additive_expression + multiplicative_expression (Addition operation)
(Line No. 19) Reduction: relational_expression --> additive_expression (Expression without comparison)
(Line No. 19) Reduction: equality_expression --> relational_expression (Expression without equality check)
(Line No. 19) Reduction: logical_and_expression --> equality_expression (Expression without logical AND)
(Line No. 19) Reduction: logical_or_expression --> logical_and_expression (Expression without logical OR)
(Line No. 19) Reduction: conditional_expression --> logical_or_expression (Expression without conditional operator)
(Line No. 19) Reduction: assignment_expression --> conditional_expression (Expression without assignment)
(Line No. 19) Reduction: assignment_expression --> unary_expression = assignment_expression (Assignment operation)
(Line No. 19) Reduction: expression --> assignment_expression (Complete expression)
(Line No. 20) Reduction: primary_expression --> IDENTIFIER (An identifier reference)
(Line No. 20) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 20) Reduction: primary_expression --> IDENTIFIER (An identifier reference)
(Line No. 20) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 20) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 20) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 20) Reduction: additive_expression --> multiplicative_expression (Expression without addition/subtraction)
(Line No. 20) Reduction: relational_expression --> additive_expression (Expression without comparison)
(Line No. 20) Reduction: equality_expression --> relational_expression (Expression without equality check)
(Line No. 20) Reduction: logical_and_expression --> equality_expression (Expression without logical AND)
(Line No. 20) Reduction: logical_or_expression --> logical_and_expression (Expression without logical OR)
(Line No. 20) Reduction: conditional_expression --> logical_or_expression (Expression without conditional operator)
(Line No. 20) Reduction: assignment_expression --> conditional_expression (Expression without assignment)
(Line No. 20) Reduction: expression --> assignment_expression (Complete expression)
(Line No. 20) Reduction: postfix_expression --> postfix_expression [ expression ] (Array access)
(Line No. 20) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 20) Reduction: primary_expression --> IDENTIFIER (An identifier reference)
(Line No. 20) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 20) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 20) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 20) Reduction: additive_expression --> multiplicative_expression (Expression without addition/subtraction)
(Line No. 20) Reduction: relational_expression --> additive_expression (Expression without comparison)
(Line No. 20) Reduction: equality_expression --> relational_expression (Expression without equality check)
(Line No. 20) Reduction: logical_and_expression --> equality_expression (Expression without logical AND)
(Line No. 20) Reduction: logical_or_expression --> logical_and_expression (Expression without logical OR)
(Line No. 20) Reduction: conditional_expression --> logical_or_expression (Expression without conditional operator)
(Line No. 20) Reduction: assignment_expression --> conditional_expression (Expression without assignment)
(Line No. 20) Reduction: assignment_expression --> unary_expression = assignment_expression (Assignment operation)
(Line No. 20) Reduction: expression --> assignment_expression (Complete expression)
(Line No. 20) Reduction: expression_statement --> expression ; (Expression statement)
(Line No. 20) Reduction: statement --> expression_statement (Expression statement)
(Line No. 20) Reduction: block_item --> statement (Statement in block)
(Line No. 20) Reduction: block_item_list --> block_item (First item in block)
(Line No. 21) Reduction: compound_statement --> begin block_item_list end (Block with items)
(Line No. 21) Reduction: statement --> compound_statement (Block statement)
(Line No. 21) Reduction: iteration_statement --> for ( expression_statement expression_statement expression ) statement (For loop with update)
(Line No. 21) Reduction: statement --> iteration_statement (Loop statement)
(Line No. 21) Reduction: block_item --> statement (Statement in block)
(Line No. 21) Reduction: block_item_list --> block_item_list block_item (Additional item in block)
(Line No. 22) Reduction: type_specifier --> integer (Integer type)
(Line No. 22) Reduction: direct_declarator --> IDENTIFIER (Simple identifier)
(Line No. 22) Reduction: declarator --> direct_declarator (Non-pointer declarator)
(Line No. 22) Reduction: init_declarator --> declarator (Declaration without initialization)
(Line No. 22) Reduction: declaration --> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 22) Reduction: block_item --> declaration (Declaration in block)
(Line No. 22) Reduction: block_item_list --> block_item_list block_item (Additional item in block)
(Line No. 23) Reduction: primary_expression --> IDENTIFIER (An identifier reference)
(Line No. 23) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 23) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 23) Reduction: primary_expression --> IDENTIFIER (An identifier reference)
(Line No. 23) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 23) Reduction: primary_expression --> IDENTIFIER (An identifier reference)
(Line No. 23) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 23) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 23) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 23) Reduction: additive_expression --> multiplicative_expression (Expression without addition/subtraction)
(Line No. 23) Reduction: relational_expression --> additive_expression (Expression without comparison)
(Line No. 23) Reduction: equality_expression --> relational_expression (Expression without equality check)
(Line No. 23) Reduction: logical_and_expression --> equality_expression (Expression without logical AND)
(Line No. 23) Reduction: logical_or_expression --> logical_and_expression (Expression without logical OR)
(Line No. 23) Reduction: conditional_expression --> logical_or_expression (Expression without conditional operator)
(Line No. 23) Reduction: assignment_expression --> conditional_expression (Expression without assignment)
(Line No. 23) Reduction: argument_expression_list --> assignment_expression (First argument in function call)
(Line No. 23) Reduction: postfix_expression --> postfix_expression ( argument_expression_list ) (Function call with arguments)
(Line No. 23) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 23) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 23) Reduction: additive_expression --> multiplicative_expression (Expression without addition/subtraction)
(Line No. 23) Reduction: relational_expression --> additive_expression (Expression without comparison)
(Line No. 23) Reduction: equality_expression --> relational_expression (Expression without equality check)
(Line No. 23) Reduction: logical_and_expression --> equality_expression (Expression without logical AND)
(Line No. 23) Reduction: logical_or_expression --> logical_and_expression (Expression without logical OR)
(Line No. 23) Reduction: conditional_expression --> logical_or_expression (Expression without conditional operator)
(Line No. 23) Reduction: assignment_expression --> conditional_expression (Expression without assignment)
(Line No. 23) Reduction: assignment_expression --> unary_expression = assignment_expression (Assignment operation)
(Line No. 23) Reduction: expression --> assignment_expression (Complete expression)
(Line No. 23) Reduction: expression_statement --> expression ; (Expression statement)
(Line No. 23) Reduction: statement --> expression_statement (Expression statement)
(Line No. 23) Reduction: block_item --> statement (Statement in block)
(Line No. 23) Reduction: block_item_list --> block_item_list block_item (Additional item in block)
(Line No. 25) Reduction: primary_expression --> INTEGER_CONSTANT (An integer literal)
(Line No. 25) Reduction: postfix_expression --> primary_expression (A simple expression)
(Line No. 25) Reduction: unary_expression --> postfix_expression (Expression without unary operator)
(Line No. 25) Reduction: multiplicative_expression --> unary_expression (Expression without multiplication)
(Line No. 25) Reduction: additive_expression --> multiplicative_expression (Expression without addition/subtraction)
(Line No. 25) Reduction: relational_expression --> additive_expression (Expression without comparison)
(Line No. 25) Reduction: equality_expression --> relational_expression (Expression without equality check)
(Line No. 25) Reduction: logical_and_expression --> equality_expression (Expression without logical AND)
(Line No. 25) Reduction: logical_or_expression --> logical_and_expression (Expression without logical OR)
(Line No. 25) Reduction: conditional_expression --> logical_or_expression (Expression without conditional operator)
(Line No. 25) Reduction: assignment_expression --> conditional_expression (Expression without assignment)
(Line No. 25) Reduction: expression --> assignment_expression (Complete expression)
(Line No. 25) Reduction: jump_statement --> return expression ;
(Line No. 25) Reduction: statement --> jump_statement (Jump/return statement)
(Line No. 25) Reduction: block_item --> statement (Statement in block)
(Line No. 25) Reduction: block_item_list --> block_item_list block_item (Additional item in block)
(Line No. 26) Reduction: compound_statement --> begin block_item_list end (Block with items)
(Line No. 26) Reduction: function_definition --> type_specifier function_declarator compound_statement
(Line No. 26) Reduction: translation_unit --> translation_unit function_definition
Parsing completed successfully.
