Parsing...
(Line No. 9) Reduction: type_specifier -> integer (Integer type)
(Line No. 9) Reduction: direct_declarator -> IDENTIFIER (Simple identifier)
(Line No. 9) Reduction: declarator -> direct_declarator (Non-pointer declarator)
(Line No. 9) Reduction: init_declarator -> declarator (Declaration without initialization)
(Line No. 9) Reduction: declaration -> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 9) Reduction: translation_unit -> declaration
(Line No. 10) Reduction: type_specifier -> float (Float type)
(Line No. 10) Reduction: direct_declarator -> IDENTIFIER (Simple identifier)
(Line No. 10) Reduction: declarator -> direct_declarator (Non-pointer declarator)
(Line No. 10) Reduction: init_declarator -> declarator (Declaration without initialization)
(Line No. 10) Reduction: declaration -> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 10) Reduction: translation_unit -> translation_unit declaration
(Line No. 11) Reduction: type_specifier -> char (Character type)
(Line No. 11) Reduction: direct_declarator -> IDENTIFIER (Simple identifier)
(Line No. 11) Reduction: declarator -> direct_declarator (Non-pointer declarator)
(Line No. 11) Reduction: init_declarator -> declarator (Declaration without initialization)
(Line No. 11) Reduction: declaration -> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 11) Reduction: translation_unit -> translation_unit declaration
(Line No. 12) Reduction: type_specifier -> bool (Boolean type)
(Line No. 12) Reduction: direct_declarator -> IDENTIFIER (Simple identifier)
(Line No. 12) Reduction: declarator -> direct_declarator (Non-pointer declarator)
(Line No. 12) Reduction: init_declarator -> declarator (Declaration without initialization)
(Line No. 12) Reduction: declaration -> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 12) Reduction: translation_unit -> translation_unit declaration
(Line No. 15) Reduction: type_specifier -> void (Void type)
(Line No. 15) Reduction: direct_declarator -> IDENTIFIER ( ) (Function declarator without parameters)
(Line No. 15) Reduction: declarator -> direct_declarator (Non-pointer declarator)
(Line No. 15) Reduction: init_declarator -> declarator (Declaration without initialization)
(Line No. 15) Reduction: declaration -> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 15) Reduction: translation_unit -> translation_unit declaration
(Line No. 18) Reduction: type_specifier -> integer (Integer type)
(Line No. 18) Reduction: type_specifier -> integer (Integer type)
(Line No. 18) Reduction: parameter_declaration -> type_specifier IDENTIFIER (Parameter with type and name)
(Line No. 18) Reduction: parameter_list -> parameter_declaration (First parameter in function)
(Line No. 18) Reduction: direct_declarator -> IDENTIFIER ( parameter_list ) (Function declarator with parameters)
(Line No. 18) Reduction: declarator -> direct_declarator (Non-pointer declarator)
(Line No. 21) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 21) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 21) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 21) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 21) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 21) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 21) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 21) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 21) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 21) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 21) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 21) Reduction: relational_expression -> relational_expression <= additive_expression (Less than or equal comparison)
(Line No. 21) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 21) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 21) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 21) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 21) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 21) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 22) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 22) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 22) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 22) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 22) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 22) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 22) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 22) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 22) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 22) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 22) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 22) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 22) Reduction: jump_statement -> return expression ;
(Line No. 22) Reduction: statement -> jump_statement (Jump/return statement)
(Line No. 24) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 24) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 24) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 24) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 24) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 24) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 24) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 24) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 24) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 24) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 24) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 24) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 24) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 24) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 24) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 24) Reduction: additive_expression -> additive_expression - multiplicative_expression (Subtraction operation)
(Line No. 24) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 24) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 24) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 24) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 24) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 24) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 24) Reduction: argument_expression_list -> assignment_expression (First argument in function call)
(Line No. 24) Reduction: postfix_expression -> postfix_expression ( argument_expression_list ) (Function call with arguments)
(Line No. 24) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 24) Reduction: multiplicative_expression -> multiplicative_expression * unary_expression (Multiplication operation)
(Line No. 24) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 24) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 24) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 24) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 24) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 24) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 24) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 24) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 24) Reduction: jump_statement -> return expression ;
(Line No. 24) Reduction: statement -> jump_statement (Jump/return statement)
(Line No. 24) Reduction: selection_statement -> if ( expression ) statement else statement (If-else statement)
(Line No. 24) Reduction: statement -> selection_statement (Selection/if statement)
(Line No. 24) Reduction: block_item -> statement (Statement in block)
(Line No. 24) Reduction: block_item_list -> block_item (First item in block)
(Line No. 25) Reduction: compound_statement -> begin block_item_list end (Block with items)
(Line No. 25) Reduction: function_definition -> type_specifier declarator compound_statement
(Line No. 25) Reduction: translation_unit -> translation_unit function_definition
(Line No. 28) Reduction: type_specifier -> integer (Integer type)
(Line No. 28) Reduction: direct_declarator -> IDENTIFIER ( ) (Function declarator without parameters)
(Line No. 28) Reduction: declarator -> direct_declarator (Non-pointer declarator)
(Line No. 31) Reduction: type_specifier -> integer (Integer type)
(Line No. 31) Reduction: direct_declarator -> IDENTIFIER (Simple identifier)
(Line No. 31) Reduction: declarator -> direct_declarator (Non-pointer declarator)
(Line No. 31) Reduction: init_declarator -> declarator (Declaration without initialization)
(Line No. 31) Reduction: declaration -> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 31) Reduction: block_item -> declaration (Declaration in block)
(Line No. 31) Reduction: block_item_list -> block_item (First item in block)
(Line No. 32) Reduction: type_specifier -> integer (Integer type)
(Line No. 32) Reduction: direct_declarator -> IDENTIFIER (Simple identifier)
(Line No. 32) Reduction: declarator -> direct_declarator (Non-pointer declarator)
(Line No. 32) Reduction: init_declarator -> declarator (Declaration without initialization)
(Line No. 32) Reduction: declaration -> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 32) Reduction: block_item -> declaration (Declaration in block)
(Line No. 32) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 33) Reduction: type_specifier -> integer (Integer type)
(Line No. 33) Reduction: direct_declarator -> IDENTIFIER (Simple identifier)
(Line No. 33) Reduction: declarator -> direct_declarator (Non-pointer declarator)
(Line No. 33) Reduction: init_declarator -> declarator (Declaration without initialization)
(Line No. 33) Reduction: declaration -> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 33) Reduction: block_item -> declaration (Declaration in block)
(Line No. 33) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 34) Reduction: type_specifier -> integer (Integer type)
(Line No. 34) Reduction: direct_declarator -> IDENTIFIER (Simple identifier)
(Line No. 34) Reduction: declarator -> direct_declarator (Non-pointer declarator)
(Line No. 34) Reduction: init_declarator -> declarator (Declaration without initialization)
(Line No. 34) Reduction: declaration -> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 34) Reduction: block_item -> declaration (Declaration in block)
(Line No. 34) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 35) Reduction: type_specifier -> integer (Integer type)
(Line No. 35) Reduction: direct_declarator -> IDENTIFIER (Simple identifier)
(Line No. 35) Reduction: declarator -> direct_declarator (Non-pointer declarator)
(Line No. 35) Reduction: init_declarator -> declarator (Declaration without initialization)
(Line No. 35) Reduction: declaration -> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 35) Reduction: block_item -> declaration (Declaration in block)
(Line No. 35) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 38) Reduction: type_specifier -> integer (Integer type)
(Line No. 38) Reduction: direct_declarator -> IDENTIFIER [ INTEGER_CONSTANT ] (Array declarator)
(Line No. 38) Reduction: declarator -> direct_declarator (Non-pointer declarator)
(Line No. 38) Reduction: init_declarator -> declarator (Declaration without initialization)
(Line No. 38) Reduction: declaration -> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 38) Reduction: block_item -> declaration (Declaration in block)
(Line No. 38) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 39) Reduction: type_specifier -> integer (Integer type)
(Line No. 39) Reduction: direct_declarator -> IDENTIFIER (Simple identifier)
(Line No. 39) Reduction: declarator -> direct_declarator (Non-pointer declarator)
(Line No. 39) Reduction: init_declarator -> declarator (Declaration without initialization)
(Line No. 39) Reduction: declaration -> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 39) Reduction: block_item -> declaration (Declaration in block)
(Line No. 39) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 40) Reduction: type_specifier -> integer (Integer type)
(Line No. 40) Reduction: direct_declarator -> IDENTIFIER (Simple identifier)
(Line No. 40) Reduction: declarator -> direct_declarator (Non-pointer declarator)
(Line No. 40) Reduction: init_declarator -> declarator (Declaration without initialization)
(Line No. 40) Reduction: declaration -> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 40) Reduction: block_item -> declaration (Declaration in block)
(Line No. 40) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 44) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 44) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 44) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 44) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 44) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 44) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 44) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 44) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 44) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 44) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 44) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 44) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 44) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 44) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 44) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 44) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 44) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 44) Reduction: statement -> expression_statement (Expression statement)
(Line No. 44) Reduction: block_item -> statement (Statement in block)
(Line No. 44) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 45) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 45) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 45) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 45) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 45) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 45) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 45) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 45) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 45) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 45) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 45) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 45) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 45) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 45) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 45) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 45) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 45) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 45) Reduction: statement -> expression_statement (Expression statement)
(Line No. 45) Reduction: block_item -> statement (Statement in block)
(Line No. 45) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 46) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 46) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 46) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 46) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 46) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 46) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 46) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 46) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 46) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 46) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 46) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 46) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 46) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 46) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 46) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 46) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 46) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 46) Reduction: statement -> expression_statement (Expression statement)
(Line No. 46) Reduction: block_item -> statement (Statement in block)
(Line No. 46) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 49) Reduction: type_specifier -> float (Float type)
(Line No. 49) Reduction: direct_declarator -> IDENTIFIER (Simple identifier)
(Line No. 49) Reduction: declarator -> direct_declarator (Non-pointer declarator)
(Line No. 49) Reduction: init_declarator -> declarator (Declaration without initialization)
(Line No. 49) Reduction: declaration -> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 49) Reduction: block_item -> declaration (Declaration in block)
(Line No. 49) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 50) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 50) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 50) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 50) Reduction: primary_expression -> FLOATING_CONSTANT (A floating-point literal)
(Line No. 50) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 50) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 50) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 50) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 50) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 50) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 50) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 50) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 50) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 50) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 50) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 50) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 50) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 50) Reduction: statement -> expression_statement (Expression statement)
(Line No. 50) Reduction: block_item -> statement (Statement in block)
(Line No. 50) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 51) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 51) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 51) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 51) Reduction: primary_expression -> FLOATING_CONSTANT (A floating-point literal)
(Line No. 51) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 51) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 51) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 51) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 51) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 51) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 51) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 51) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 51) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 51) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 51) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 51) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 51) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 51) Reduction: statement -> expression_statement (Expression statement)
(Line No. 51) Reduction: block_item -> statement (Statement in block)
(Line No. 51) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 52) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 52) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 52) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 52) Reduction: primary_expression -> FLOATING_CONSTANT (A floating-point literal)
(Line No. 52) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 52) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 52) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 52) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 52) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 52) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 52) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 52) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 52) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 52) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 52) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 52) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 52) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 52) Reduction: statement -> expression_statement (Expression statement)
(Line No. 52) Reduction: block_item -> statement (Statement in block)
(Line No. 52) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 53) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 53) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 53) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 53) Reduction: primary_expression -> FLOATING_CONSTANT (A floating-point literal)
(Line No. 53) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 53) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 53) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 53) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 53) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 53) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 53) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 53) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 53) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 53) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 53) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 53) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 53) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 53) Reduction: statement -> expression_statement (Expression statement)
(Line No. 53) Reduction: block_item -> statement (Statement in block)
(Line No. 53) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 54) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 54) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 54) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 54) Reduction: primary_expression -> FLOATING_CONSTANT (A floating-point literal)
(Line No. 54) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 54) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 54) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 54) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 54) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 54) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 54) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 54) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 54) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 54) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 54) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 54) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 54) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 54) Reduction: statement -> expression_statement (Expression statement)
(Line No. 54) Reduction: block_item -> statement (Statement in block)
(Line No. 54) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 55) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 55) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 55) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 55) Reduction: primary_expression -> FLOATING_CONSTANT (A floating-point literal)
(Line No. 55) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 55) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 55) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 55) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 55) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 55) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 55) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 55) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 55) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 55) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 55) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 55) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 55) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 55) Reduction: statement -> expression_statement (Expression statement)
(Line No. 55) Reduction: block_item -> statement (Statement in block)
(Line No. 55) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 58) Reduction: type_specifier -> char (Character type)
(Line No. 58) Reduction: direct_declarator -> IDENTIFIER (Simple identifier)
(Line No. 58) Reduction: declarator -> direct_declarator (Non-pointer declarator)
(Line No. 58) Reduction: init_declarator -> declarator (Declaration without initialization)
(Line No. 58) Reduction: declaration -> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 58) Reduction: block_item -> declaration (Declaration in block)
(Line No. 58) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 59) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 59) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 59) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 59) Reduction: primary_expression -> CHARACTER_CONSTANT (A character literal)
(Line No. 59) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 59) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 59) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 59) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 59) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 59) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 59) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 59) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 59) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 59) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 59) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 59) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 59) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 59) Reduction: statement -> expression_statement (Expression statement)
(Line No. 59) Reduction: block_item -> statement (Statement in block)
(Line No. 59) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 60) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 60) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 60) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 60) Reduction: primary_expression -> CHARACTER_CONSTANT (A character literal)
(Line No. 60) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 60) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 60) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 60) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 60) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 60) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 60) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 60) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 60) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 60) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 60) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 60) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 60) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 60) Reduction: statement -> expression_statement (Expression statement)
(Line No. 60) Reduction: block_item -> statement (Statement in block)
(Line No. 60) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 61) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 61) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 61) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 61) Reduction: primary_expression -> CHARACTER_CONSTANT (A character literal)
(Line No. 61) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 61) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 61) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 61) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 61) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 61) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 61) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 61) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 61) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 61) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 61) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 61) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 61) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 61) Reduction: statement -> expression_statement (Expression statement)
(Line No. 61) Reduction: block_item -> statement (Statement in block)
(Line No. 61) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 62) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 62) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 62) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 62) Reduction: primary_expression -> CHARACTER_CONSTANT (A character literal)
(Line No. 62) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 62) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 62) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 62) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 62) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 62) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 62) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 62) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 62) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 62) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 62) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 62) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 62) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 62) Reduction: statement -> expression_statement (Expression statement)
(Line No. 62) Reduction: block_item -> statement (Statement in block)
(Line No. 62) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 63) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 63) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 63) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 63) Reduction: primary_expression -> CHARACTER_CONSTANT (A character literal)
(Line No. 63) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 63) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 63) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 63) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 63) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 63) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 63) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 63) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 63) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 63) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 63) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 63) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 63) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 63) Reduction: statement -> expression_statement (Expression statement)
(Line No. 63) Reduction: block_item -> statement (Statement in block)
(Line No. 63) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 66) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 66) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 66) Reduction: primary_expression -> STRING_LITERAL (A string literal)
(Line No. 66) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 66) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 66) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 66) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 66) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 66) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 66) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 66) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 66) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 66) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 66) Reduction: argument_expression_list -> assignment_expression (First argument in function call)
(Line No. 66) Reduction: postfix_expression -> postfix_expression ( argument_expression_list ) (Function call with arguments)
(Line No. 66) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 66) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 66) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 66) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 66) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 66) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 66) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 66) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 66) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 66) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 66) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 66) Reduction: statement -> expression_statement (Expression statement)
(Line No. 66) Reduction: block_item -> statement (Statement in block)
(Line No. 66) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 67) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 67) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 67) Reduction: primary_expression -> STRING_LITERAL (A string literal)
(Line No. 67) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 67) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 67) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 67) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 67) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 67) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 67) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 67) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 67) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 67) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 67) Reduction: argument_expression_list -> assignment_expression (First argument in function call)
(Line No. 67) Reduction: postfix_expression -> postfix_expression ( argument_expression_list ) (Function call with arguments)
(Line No. 67) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 67) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 67) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 67) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 67) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 67) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 67) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 67) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 67) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 67) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 67) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 67) Reduction: statement -> expression_statement (Expression statement)
(Line No. 67) Reduction: block_item -> statement (Statement in block)
(Line No. 67) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 68) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 68) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 68) Reduction: primary_expression -> STRING_LITERAL (A string literal)
(Line No. 68) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 68) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 68) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 68) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 68) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 68) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 68) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 68) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 68) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 68) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 68) Reduction: argument_expression_list -> assignment_expression (First argument in function call)
(Line No. 68) Reduction: postfix_expression -> postfix_expression ( argument_expression_list ) (Function call with arguments)
(Line No. 68) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 68) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 68) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 68) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 68) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 68) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 68) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 68) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 68) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 68) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 68) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 68) Reduction: statement -> expression_statement (Expression statement)
(Line No. 68) Reduction: block_item -> statement (Statement in block)
(Line No. 68) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 69) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 69) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 69) Reduction: primary_expression -> STRING_LITERAL (A string literal)
(Line No. 69) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 69) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 69) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 69) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 69) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 69) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 69) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 69) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 69) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 69) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 69) Reduction: argument_expression_list -> assignment_expression (First argument in function call)
(Line No. 69) Reduction: postfix_expression -> postfix_expression ( argument_expression_list ) (Function call with arguments)
(Line No. 69) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 69) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 69) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 69) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 69) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 69) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 69) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 69) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 69) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 69) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 69) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 69) Reduction: statement -> expression_statement (Expression statement)
(Line No. 69) Reduction: block_item -> statement (Statement in block)
(Line No. 69) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 72) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 72) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 72) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 72) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 72) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 72) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 72) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 72) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 72) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 72) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 72) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 72) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 72) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 72) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 72) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 72) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 72) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 72) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 72) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 72) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 72) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 72) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 72) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 72) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 72) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 72) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 72) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 72) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 72) Reduction: relational_expression -> relational_expression < additive_expression (Less than comparison)
(Line No. 72) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 72) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 72) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 72) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 72) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 72) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 72) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 72) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 72) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 72) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 72) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 72) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 72) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 72) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 72) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 72) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 72) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 72) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 72) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 72) Reduction: additive_expression -> additive_expression + multiplicative_expression (Addition operation)
(Line No. 72) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 72) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 72) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 72) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 72) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 72) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 72) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 72) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 73) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 73) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 73) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 73) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 73) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 73) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 73) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 73) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 73) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 73) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 73) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 73) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 73) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 73) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 73) Reduction: postfix_expression -> postfix_expression [ expression ] (Array access)
(Line No. 73) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 73) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 73) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 73) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 73) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 73) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 73) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 73) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 73) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 73) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 73) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 73) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 73) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 73) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 73) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 73) Reduction: statement -> expression_statement (Expression statement)
(Line No. 73) Reduction: iteration_statement -> for ( expression_statement expression_statement expression ) statement (For loop with update)
(Line No. 73) Reduction: statement -> iteration_statement (Loop statement)
(Line No. 73) Reduction: block_item -> statement (Statement in block)
(Line No. 73) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 76) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 76) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 76) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 76) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 76) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 76) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 76) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 76) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 76) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 76) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 76) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 76) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 76) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 76) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 76) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 76) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 76) Reduction: argument_expression_list -> assignment_expression (First argument in function call)
(Line No. 76) Reduction: postfix_expression -> postfix_expression ( argument_expression_list ) (Function call with arguments)
(Line No. 76) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 76) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 76) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 76) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 76) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 76) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 76) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 76) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 76) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 76) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 76) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 76) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 76) Reduction: statement -> expression_statement (Expression statement)
(Line No. 76) Reduction: block_item -> statement (Statement in block)
(Line No. 76) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 79) Reduction: type_specifier -> integer (Integer type)
(Line No. 79) Reduction: direct_declarator -> IDENTIFIER (Simple identifier)
(Line No. 79) Reduction: declarator -> direct_declarator (Non-pointer declarator)
(Line No. 79) Reduction: init_declarator -> declarator (Declaration without initialization)
(Line No. 79) Reduction: declaration -> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 79) Reduction: block_item -> declaration (Declaration in block)
(Line No. 79) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 80) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 80) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 80) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 80) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 80) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 80) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 80) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 80) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 80) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 80) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 80) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 80) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 80) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 80) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 80) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 80) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 80) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 80) Reduction: postfix_expression -> postfix_expression [ expression ] (Array access)
(Line No. 80) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 80) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 80) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 80) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 80) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 80) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 80) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 80) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 80) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 80) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 80) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 80) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 80) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 80) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 80) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 80) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 80) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 80) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 80) Reduction: postfix_expression -> postfix_expression [ expression ] (Array access)
(Line No. 80) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 80) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 80) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 80) Reduction: relational_expression -> relational_expression > additive_expression (Greater than comparison)
(Line No. 80) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 80) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 80) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 80) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 80) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 80) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 80) Reduction: primary_expression -> ( expression ) (Expression in parentheses)
(Line No. 80) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 80) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 80) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 80) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 80) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 80) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 80) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 80) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 80) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 80) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 80) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 80) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 80) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 80) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 80) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 80) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 80) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 80) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 80) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 80) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 80) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 80) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 80) Reduction: postfix_expression -> postfix_expression [ expression ] (Array access)
(Line No. 80) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 80) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 80) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 80) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 80) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 80) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 80) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 80) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 80) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 80) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 80) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 80) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 80) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 80) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 80) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 80) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 80) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 80) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 80) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 80) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 80) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 80) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 80) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 80) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 80) Reduction: postfix_expression -> postfix_expression [ expression ] (Array access)
(Line No. 80) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 80) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 80) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 80) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 80) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 80) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 80) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 80) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 80) Reduction: conditional_expression -> logical_or_expression ? expression : conditional_expression (Conditional/ternary operation)
(Line No. 80) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 80) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 80) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 80) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 80) Reduction: statement -> expression_statement (Expression statement)
(Line No. 80) Reduction: block_item -> statement (Statement in block)
(Line No. 80) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 83) Reduction: type_specifier -> integer (Integer type)
(Line No. 83) Reduction: pointer -> * (Pointer symbol)
(Line No. 83) Reduction: direct_declarator -> IDENTIFIER (Simple identifier)
(Line No. 83) Reduction: declarator -> pointer direct_declarator (Pointer declarator)
(Line No. 83) Reduction: init_declarator -> declarator (Declaration without initialization)
(Line No. 83) Reduction: declaration -> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 83) Reduction: block_item -> declaration (Declaration in block)
(Line No. 83) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 84) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 84) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 84) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 84) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 84) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 84) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 84) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 84) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 84) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 84) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 84) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 84) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 84) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 84) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 84) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 84) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 84) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 84) Reduction: postfix_expression -> postfix_expression [ expression ] (Array access)
(Line No. 84) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 84) Reduction: unary_expression -> & unary_expression (Address-of operator)
(Line No. 84) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 84) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 84) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 84) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 84) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 84) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 84) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 84) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 84) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 84) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 84) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 84) Reduction: statement -> expression_statement (Expression statement)
(Line No. 84) Reduction: block_item -> statement (Statement in block)
(Line No. 84) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 87) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 87) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 87) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 87) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 87) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 87) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 87) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 87) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 87) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 87) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 87) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 87) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 87) Reduction: additive_expression -> additive_expression + multiplicative_expression (Addition operation)
(Line No. 87) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 87) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 87) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 87) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 87) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 87) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 87) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 87) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 87) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 87) Reduction: statement -> expression_statement (Expression statement)
(Line No. 87) Reduction: block_item -> statement (Statement in block)
(Line No. 87) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 88) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 88) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 88) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 88) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 88) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 88) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 88) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 88) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 88) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 88) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 88) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 88) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 88) Reduction: additive_expression -> additive_expression - multiplicative_expression (Subtraction operation)
(Line No. 88) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 88) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 88) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 88) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 88) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 88) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 88) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 88) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 88) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 88) Reduction: statement -> expression_statement (Expression statement)
(Line No. 88) Reduction: block_item -> statement (Statement in block)
(Line No. 88) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 89) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 89) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 89) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 89) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 89) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 89) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 89) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 89) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 89) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 89) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 89) Reduction: multiplicative_expression -> multiplicative_expression * unary_expression (Multiplication operation)
(Line No. 89) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 89) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 89) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 89) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 89) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 89) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 89) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 89) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 89) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 89) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 89) Reduction: statement -> expression_statement (Expression statement)
(Line No. 89) Reduction: block_item -> statement (Statement in block)
(Line No. 89) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 90) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 90) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 90) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 90) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 90) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 90) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 90) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 90) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 90) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 90) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 90) Reduction: multiplicative_expression -> multiplicative_expression / unary_expression (Division operation)
(Line No. 90) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 90) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 90) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 90) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 90) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 90) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 90) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 90) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 90) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 90) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 90) Reduction: statement -> expression_statement (Expression statement)
(Line No. 90) Reduction: block_item -> statement (Statement in block)
(Line No. 90) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 91) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 91) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 91) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 91) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 91) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 91) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 91) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 91) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 91) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 91) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 91) Reduction: multiplicative_expression -> multiplicative_expression % unary_expression (Modulo operation)
(Line No. 91) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 91) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 91) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 91) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 91) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 91) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 91) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 91) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 91) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 91) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 91) Reduction: statement -> expression_statement (Expression statement)
(Line No. 91) Reduction: block_item -> statement (Statement in block)
(Line No. 91) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 94) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 94) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 94) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 94) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 94) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 94) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 94) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 94) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 94) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 94) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 94) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 94) Reduction: relational_expression -> relational_expression > additive_expression (Greater than comparison)
(Line No. 94) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 94) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 94) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 94) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 94) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 94) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 94) Reduction: primary_expression -> ( expression ) (Expression in parentheses)
(Line No. 94) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 94) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 94) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 94) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 94) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 94) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 94) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 94) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 94) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 94) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 94) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 94) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 94) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 94) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 94) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 94) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 94) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 94) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 94) Reduction: relational_expression -> relational_expression < additive_expression (Less than comparison)
(Line No. 94) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 94) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 94) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 94) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 94) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 94) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 94) Reduction: primary_expression -> ( expression ) (Expression in parentheses)
(Line No. 94) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 94) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 94) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 94) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 94) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 94) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 94) Reduction: logical_and_expression -> logical_and_expression && equality_expression (Logical AND operation)
(Line No. 94) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 94) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 94) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 94) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 95) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 95) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 95) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 95) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 95) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 95) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 95) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 95) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 95) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 95) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 95) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 95) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 95) Reduction: jump_statement -> return expression ;
(Line No. 95) Reduction: statement -> jump_statement (Jump/return statement)
(Line No. 97) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 97) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 97) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 97) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 97) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 97) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 97) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 97) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 97) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 97) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 97) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 97) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 97) Reduction: jump_statement -> return expression ;
(Line No. 97) Reduction: statement -> jump_statement (Jump/return statement)
(Line No. 97) Reduction: selection_statement -> if ( expression ) statement else statement (If-else statement)
(Line No. 97) Reduction: statement -> selection_statement (Selection/if statement)
(Line No. 97) Reduction: block_item -> statement (Statement in block)
(Line No. 97) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 98) Reduction: compound_statement -> begin block_item_list end (Block with items)
(Line No. 98) Reduction: function_definition -> type_specifier declarator compound_statement
(Line No. 98) Reduction: translation_unit -> translation_unit function_definition
(Line No. 101) Reduction: type_specifier -> void (Void type)
(Line No. 101) Reduction: type_specifier -> char (Character type)
(Line No. 101) Reduction: pointer -> * (Pointer symbol)
(Line No. 101) Reduction: parameter_declaration -> type_specifier pointer IDENTIFIER (Pointer parameter with type and name)
(Line No. 101) Reduction: parameter_list -> parameter_declaration (First parameter in function)
(Line No. 101) Reduction: direct_declarator -> IDENTIFIER ( parameter_list ) (Function declarator with parameters)
(Line No. 101) Reduction: declarator -> direct_declarator (Non-pointer declarator)
(Line No. 104) Reduction: type_specifier -> integer (Integer type)
(Line No. 104) Reduction: direct_declarator -> IDENTIFIER (Simple identifier)
(Line No. 104) Reduction: declarator -> direct_declarator (Non-pointer declarator)
(Line No. 104) Reduction: init_declarator -> declarator (Declaration without initialization)
(Line No. 104) Reduction: declaration -> type_specifier init_declarator ; (Variable or function declaration)
(Line No. 104) Reduction: block_item -> declaration (Declaration in block)
(Line No. 104) Reduction: block_item_list -> block_item (First item in block)
(Line No. 105) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 105) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 105) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 105) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 105) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 105) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 105) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 105) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 105) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 105) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 105) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 105) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 105) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 105) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 105) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 105) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 105) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 105) Reduction: statement -> expression_statement (Expression statement)
(Line No. 105) Reduction: block_item -> statement (Statement in block)
(Line No. 105) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 106) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 106) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 106) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 106) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 106) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 106) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 106) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 106) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 106) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 106) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 106) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 106) Reduction: relational_expression -> relational_expression < additive_expression (Less than comparison)
(Line No. 106) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 106) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 106) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 106) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 106) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 106) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 107) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 107) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 107) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 107) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 107) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 107) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 107) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 107) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 107) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 107) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 107) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 107) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 107) Reduction: additive_expression -> additive_expression + multiplicative_expression (Addition operation)
(Line No. 107) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 107) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 107) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 107) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 107) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 107) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 107) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 107) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 107) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 107) Reduction: statement -> expression_statement (Expression statement)
(Line No. 107) Reduction: iteration_statement -> while ( expression ) statement (While loop)
(Line No. 107) Reduction: statement -> iteration_statement (Loop statement)
(Line No. 107) Reduction: block_item -> statement (Statement in block)
(Line No. 107) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 110) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 110) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 110) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 110) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 110) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 110) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 110) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 110) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 110) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 110) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 110) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 110) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 110) Reduction: additive_expression -> additive_expression - multiplicative_expression (Subtraction operation)
(Line No. 110) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 110) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 110) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 110) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 110) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 110) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 110) Reduction: assignment_expression -> unary_expression = assignment_expression (Assignment operation)
(Line No. 110) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 110) Reduction: expression_statement -> expression ; (Expression statement)
(Line No. 110) Reduction: statement -> expression_statement (Expression statement)
(Line No. 111) Reduction: primary_expression -> IDENTIFIER (An identifier reference)
(Line No. 111) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 111) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 111) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 111) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 111) Reduction: relational_expression -> additive_expression (Expression without comparison)
(Line No. 111) Reduction: primary_expression -> INTEGER_CONSTANT (An integer literal)
(Line No. 111) Reduction: postfix_expression -> primary_expression (A simple expression)
(Line No. 111) Reduction: unary_expression -> postfix_expression (Expression without unary operator)
(Line No. 111) Reduction: multiplicative_expression -> unary_expression (Expression without multiplication)
(Line No. 111) Reduction: additive_expression -> multiplicative_expression (Expression without addition/subtraction)
(Line No. 111) Reduction: relational_expression -> relational_expression > additive_expression (Greater than comparison)
(Line No. 111) Reduction: equality_expression -> relational_expression (Expression without equality check)
(Line No. 111) Reduction: logical_and_expression -> equality_expression (Expression without logical AND)
(Line No. 111) Reduction: logical_or_expression -> logical_and_expression (Expression without logical OR)
(Line No. 111) Reduction: conditional_expression -> logical_or_expression (Expression without conditional operator)
(Line No. 111) Reduction: assignment_expression -> conditional_expression (Expression without assignment)
(Line No. 111) Reduction: expression -> assignment_expression (Complete expression)
(Line No. 111) Reduction: iteration_statement -> do statement while ( expression ) ; (Do-while loop)
(Line No. 111) Reduction: statement -> iteration_statement (Loop statement)
(Line No. 111) Reduction: block_item -> statement (Statement in block)
(Line No. 111) Reduction: block_item_list -> block_item_list block_item (Additional item in block)
(Line No. 112) Reduction: compound_statement -> begin block_item_list end (Block with items)
(Line No. 112) Reduction: function_definition -> type_specifier declarator compound_statement
(Line No. 112) Reduction: translation_unit -> translation_unit function_definition
Parsing completed successfully.
