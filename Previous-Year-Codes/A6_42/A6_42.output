Terminals unused in grammar

    INVALID_TOKEN


Grammar

    0 $accept: translation_unit $end

    1 primary_expression: IDENTIFIER
    2                   | INTEGER_CONSTANT
    3                   | CHARACTER_CONSTANT
    4                   | STRING_LITERAL
    5                   | LEFT_PARENTHESES expression RIGHT_PARENTHESES

    6 postfix_expression: primary_expression
    7                   | postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | postfix_expression ARROW IDENTIFIER
   10                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET

   12 argument_expression_list_opt: argument_expression_list
   13                             | ε

   14 argument_expression_list: assignment_expression
   15                         | argument_expression_list COMMA assignment_expression

   16 unary_expression: postfix_expression
   17                 | unary_operator unary_expression

   18 unary_operator: ASTERISK
   19               | PLUS
   20               | MINUS
   21               | EXCLAMATION
   22               | ADDRESS

   23 multiplicative_expression: unary_expression
   24                          | multiplicative_expression ASTERISK unary_expression
   25                          | multiplicative_expression SLASH unary_expression
   26                          | multiplicative_expression MODULO unary_expression

   27 additive_expression: multiplicative_expression
   28                    | additive_expression PLUS multiplicative_expression
   29                    | additive_expression MINUS multiplicative_expression

   30 relational_expression: additive_expression
   31                      | relational_expression LESS_THAN additive_expression
   32                      | relational_expression GREATER_THAN additive_expression
   33                      | relational_expression LESS_EQUAL_THAN additive_expression
   34                      | relational_expression GREATER_EQUAL_THAN additive_expression

   35 equality_expression: relational_expression
   36                    | equality_expression EQUALS relational_expression
   37                    | equality_expression NOT_EQUALS relational_expression

   38 M: ε

   39 N: ε

   40 logical_AND_expression: equality_expression
   41                       | logical_AND_expression LOGICAL_AND M equality_expression

   42 logical_OR_expression: logical_AND_expression
   43                      | logical_OR_expression LOGICAL_OR M logical_AND_expression

   44 conditional_expression: logical_OR_expression
   45                       | logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression

   46 assignment_expression: conditional_expression
   47                      | unary_expression ASSIGNMENT assignment_expression

   48 expression: assignment_expression
   49           | expression COMMA assignment_expression

   50 constant_expression: conditional_expression

   51 declaration: declaration_specifiers init_declarator_list_opt SEMI_COLON

   52 init_declarator_list_opt: init_declarator_list
   53                         | ε

   54 declaration_specifiers: type_specifier declaration_specifiers_opt
   55                       | type_qualifier declaration_specifiers_opt

   56 declaration_specifiers_opt: declaration_specifiers
   57                           | ε

   58 init_declarator_list: init_declarator
   59                     | init_declarator_list COMMA init_declarator

   60 init_declarator: declarator
   61                | declarator ASSIGNMENT initialiser

   62 type_specifier: VOIDTYPE
   63               | INTTYPE

   64 specifier_qualifier_list: type_specifier specifier_qualifier_list_opt
   65                         | type_qualifier specifier_qualifier_list_opt

   66 specifier_qualifier_list_opt: specifier_qualifier_list
   67                             | ε

   68 type_qualifier: CONST

   69 declarator: pointer direct_declarator
   70           | direct_declarator

   71 change_scope: ε

   72 direct_declarator: IDENTIFIER
   73                  | LEFT_PARENTHESES declarator RIGHT_PARENTHESES
   74                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
   75                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
   76                  | direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
   77                  | direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   78                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
   79                  | direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
   80                  | direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
   81                  | direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
   82                  | direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES

   83 type_qualifier_list_opt: type_qualifier_list
   84                        | ε

   85 pointer: ASTERISK type_qualifier_list_opt
   86        | ASTERISK type_qualifier_list_opt pointer

   87 type_qualifier_list: type_qualifier
   88                    | type_qualifier_list type_qualifier

   89 parameter_type_list: parameter_list

   90 parameter_list: parameter_declaration
   91               | parameter_list COMMA parameter_declaration

   92 parameter_declaration: declaration_specifiers declarator
   93                      | declaration_specifiers

   94 identifier_list: IDENTIFIER
   95                | identifier_list COMMA IDENTIFIER

   96 type_name: specifier_qualifier_list

   97 initialiser: assignment_expression
   98            | LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   99            | LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET

  100 initialiser_list: designation_opt initialiser
  101                 | initialiser_list COMMA designation_opt initialiser

  102 designation_opt: designation
  103                | ε

  104 designation: designator_list ASSIGNMENT

  105 designator_list: designator
  106                | designator_list designator

  107 designator: LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET

  108 statement: compound_statement
  109          | expression_statement
  110          | selection_statement
  111          | iteration_statement
  112          | jump_statement

  113 compound_statement: BEGIN block_item_list_opt END

  114 block_item_list_opt: block_item_list
  115                    | ε

  116 block_item_list: block_item
  117                | block_item_list M block_item

  118 block_item: declaration
  119           | statement

  120 expression_statement: expression_opt SEMI_COLON

  121 expression_opt: expression
  122               | ε

  123 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  124                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement

  125 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  126                    | FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement

  127 jump_statement: RETURN expression_opt SEMI_COLON

  128 translation_unit: external_declaration
  129                 | translation_unit external_declaration

  130 external_declaration: function_definition
  131                     | declaration

  132 function_definition: declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

  133 declaration_list_opt: declaration_list
  134                     | ε

  135 declaration_list: declaration
  136                 | declaration_list declaration


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    BEGIN (258) 113
    END (259) 113
    CONST (260) 68
    ELSE (261) 124
    FOR (262) 125 126
    IF (263) 123 124
    ADDRESS (264) 22
    INTTYPE (265) 63
    RETURN (266) 127
    INVALID_TOKEN (267)
    VOIDTYPE (268) 62
    IDENTIFIER <symbol> (269) 1 9 72 94 95
    INTEGER_CONSTANT <intVal> (270) 2
    CHARACTER_CONSTANT <charVal> (271) 3
    STRING_LITERAL <stringVal> (272) 4
    LEFT_SQUARE_BRACKET (273) 7 74 75 76 77 78 79 107
    SLASH (274) 25
    QUESTION_MARK (275) 45
    ASSIGNMENT (276) 47 61 104
    COMMA (277) 11 15 49 59 91 95 99 101
    RIGHT_SQUARE_BRACKET (278) 7 74 75 76 77 78 79 107
    LEFT_PARENTHESES (279) 5 8 10 11 73 80 81 82 123 124 125 126
    LEFT_CURLY_BRACKET (280) 10 11 98 99 132
    RIGHT_CURLY_BRACKET (281) 10 11 98 99 132
    ARROW (282) 9
    ASTERISK (283) 18 24 78 79 85 86
    PLUS (284) 19 28
    MINUS (285) 20 29
    EXCLAMATION (286) 21
    MODULO (287) 26
    LESS_THAN (288) 31
    GREATER_THAN (289) 32
    LESS_EQUAL_THAN (290) 33
    GREATER_EQUAL_THAN (291) 34
    COLON (292) 45
    SEMI_COLON (293) 51 120 125 126 127
    RIGHT_PARENTHESES (294) 5 8 10 11 73 80 81 82 123 124 125 126
    EQUALS (295) 36
    LOGICAL_AND (296) 41
    LOGICAL_OR (297) 43
    NOT_EQUALS (298) 37
    THEN (299)


Nonterminals, with rules where they appear

    $accept (45)
        on left: 0
    primary_expression <expression> (46)
        on left: 1 2 3 4 5
        on right: 6
    postfix_expression <array> (47)
        on left: 6 7 8 9 10 11
        on right: 7 8 9 16
    argument_expression_list_opt <parameterCount> (48)
        on left: 12 13
        on right: 8
    argument_expression_list <parameterCount> (49)
        on left: 14 15
        on right: 12 15
    unary_expression <array> (50)
        on left: 16 17
        on right: 17 23 24 25 26 47
    unary_operator <unaryOperator> (51)
        on left: 18 19 20 21 22
        on right: 17
    multiplicative_expression <expression> (52)
        on left: 23 24 25 26
        on right: 24 25 26 27 28 29
    additive_expression <expression> (53)
        on left: 27 28 29
        on right: 28 29 30 31 32 33 34
    relational_expression <expression> (54)
        on left: 30 31 32 33 34
        on right: 31 32 33 34 35 36 37
    equality_expression <expression> (55)
        on left: 35 36 37
        on right: 36 37 40 41
    M <instructionNumber> (56)
        on left: 38
        on right: 41 43 45 117 123 124 125
    N <statement> (57)
        on left: 39
        on right: 45 123 124 125
    logical_AND_expression <expression> (58)
        on left: 40 41
        on right: 41 42 43
    logical_OR_expression <expression> (59)
        on left: 42 43
        on right: 43 44 45
    conditional_expression <expression> (60)
        on left: 44 45
        on right: 45 46 50
    assignment_expression <expression> (61)
        on left: 46 47
        on right: 14 15 47 48 49 74 76 97
    expression <expression> (62)
        on left: 48 49
        on right: 5 7 45 49 121 123 124
    constant_expression (63)
        on left: 50
        on right: 107
    declaration (64)
        on left: 51
        on right: 118 126 131 135 136
    init_declarator_list_opt (65)
        on left: 52 53
        on right: 51
    declaration_specifiers (66)
        on left: 54 55
        on right: 51 56 92 93 132
    declaration_specifiers_opt (67)
        on left: 56 57
        on right: 54 55
    init_declarator_list (68)
        on left: 58 59
        on right: 52 59
    init_declarator <symbol> (69)
        on left: 60 61
        on right: 58 59
    type_specifier (70)
        on left: 62 63
        on right: 54 64
    specifier_qualifier_list (71)
        on left: 64 65
        on right: 66 96
    specifier_qualifier_list_opt (72)
        on left: 66 67
        on right: 64 65
    type_qualifier (73)
        on left: 68
        on right: 55 65 87 88
    declarator <symbol> (74)
        on left: 69 70
        on right: 60 61 73 92 132
    change_scope (75)
        on left: 71
        on right: 80 82 132
    direct_declarator <symbol> (76)
        on left: 72 73 74 75 76 77 78 79 80 81 82
        on right: 69 70 74 75 76 77 78 79 80 81 82
    type_qualifier_list_opt (77)
        on left: 83 84
        on right: 85 86
    pointer <symbolType> (78)
        on left: 85 86
        on right: 69 86
    type_qualifier_list (79)
        on left: 87 88
        on right: 74 75 78 83 88
    parameter_type_list (80)
        on left: 89
        on right: 80
    parameter_list (81)
        on left: 90 91
        on right: 89 91
    parameter_declaration (82)
        on left: 92 93
        on right: 90 91
    identifier_list (83)
        on left: 94 95
        on right: 81 95
    type_name (84)
        on left: 96
        on right: 10 11
    initialiser <symbol> (85)
        on left: 97 98 99
        on right: 61 100 101
    initialiser_list (86)
        on left: 100 101
        on right: 10 11 98 99 101
    designation_opt (87)
        on left: 102 103
        on right: 100 101
    designation (88)
        on left: 104
        on right: 102
    designator_list (89)
        on left: 105 106
        on right: 104 106
    designator (90)
        on left: 107
        on right: 105 106
    statement <statement> (91)
        on left: 108 109 110 111 112
        on right: 119 123 124 125 126
    compound_statement <statement> (92)
        on left: 113
        on right: 108
    block_item_list_opt <statement> (93)
        on left: 114 115
        on right: 113 132
    block_item_list <statement> (94)
        on left: 116 117
        on right: 114 117
    block_item <statement> (95)
        on left: 118 119
        on right: 116 117
    expression_statement <expression> (96)
        on left: 120
        on right: 109
    expression_opt <expression> (97)
        on left: 121 122
        on right: 120 125 126 127
    selection_statement <statement> (98)
        on left: 123 124
        on right: 110
    iteration_statement <statement> (99)
        on left: 125 126
        on right: 111
    jump_statement <statement> (100)
        on left: 127
        on right: 112
    translation_unit (101)
        on left: 128 129
        on right: 0 129
    external_declaration (102)
        on left: 130 131
        on right: 128 129
    function_definition (103)
        on left: 132
        on right: 130
    declaration_list_opt (104)
        on left: 133 134
        on right: 132
    declaration_list (105)
        on left: 135 136
        on right: 133 136


State 0

    0 $accept: • translation_unit $end
   51 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   54 declaration_specifiers: • type_specifier declaration_specifiers_opt
   55                       | • type_qualifier declaration_specifiers_opt
   62 type_specifier: • VOIDTYPE
   63               | • INTTYPE
   68 type_qualifier: • CONST
  128 translation_unit: • external_declaration
  129                 | • translation_unit external_declaration
  130 external_declaration: • function_definition
  131                     | • declaration
  132 function_definition: • declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    CONST     shift, and go to state 1
    INTTYPE   shift, and go to state 2
    VOIDTYPE  shift, and go to state 3

    declaration             go to state 4
    declaration_specifiers  go to state 5
    type_specifier          go to state 6
    type_qualifier          go to state 7
    translation_unit        go to state 8
    external_declaration    go to state 9
    function_definition     go to state 10


State 1

   68 type_qualifier: CONST •

    $default  reduce using rule 68 (type_qualifier)


State 2

   63 type_specifier: INTTYPE •

    $default  reduce using rule 63 (type_specifier)


State 3

   62 type_specifier: VOIDTYPE •

    $default  reduce using rule 62 (type_specifier)


State 4

  131 external_declaration: declaration •

    $default  reduce using rule 131 (external_declaration)


State 5

   51 declaration: declaration_specifiers • init_declarator_list_opt SEMI_COLON
   52 init_declarator_list_opt: • init_declarator_list
   53                         | ε •  [SEMI_COLON]
   58 init_declarator_list: • init_declarator
   59                     | • init_declarator_list COMMA init_declarator
   60 init_declarator: • declarator
   61                | • declarator ASSIGNMENT initialiser
   69 declarator: • pointer direct_declarator
   70           | • direct_declarator
   72 direct_declarator: • IDENTIFIER
   73                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
   74                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
   75                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
   76                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
   77                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   78                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
   79                  | • direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
   80                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
   81                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
   82                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
   85 pointer: • ASTERISK type_qualifier_list_opt
   86        | • ASTERISK type_qualifier_list_opt pointer
  132 function_definition: declaration_specifiers • declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    IDENTIFIER        shift, and go to state 11
    LEFT_PARENTHESES  shift, and go to state 12
    ASTERISK          shift, and go to state 13

    $default  reduce using rule 53 (init_declarator_list_opt)

    init_declarator_list_opt  go to state 14
    init_declarator_list      go to state 15
    init_declarator           go to state 16
    declarator                go to state 17
    direct_declarator         go to state 18
    pointer                   go to state 19


State 6

   54 declaration_specifiers: • type_specifier declaration_specifiers_opt
   54                       | type_specifier • declaration_specifiers_opt
   55                       | • type_qualifier declaration_specifiers_opt
   56 declaration_specifiers_opt: • declaration_specifiers
   57                           | ε •  [IDENTIFIER, COMMA, LEFT_PARENTHESES, ASTERISK, SEMI_COLON, RIGHT_PARENTHESES]
   62 type_specifier: • VOIDTYPE
   63               | • INTTYPE
   68 type_qualifier: • CONST

    CONST     shift, and go to state 1
    INTTYPE   shift, and go to state 2
    VOIDTYPE  shift, and go to state 3

    $default  reduce using rule 57 (declaration_specifiers_opt)

    declaration_specifiers      go to state 20
    declaration_specifiers_opt  go to state 21
    type_specifier              go to state 6
    type_qualifier              go to state 7


State 7

   54 declaration_specifiers: • type_specifier declaration_specifiers_opt
   55                       | • type_qualifier declaration_specifiers_opt
   55                       | type_qualifier • declaration_specifiers_opt
   56 declaration_specifiers_opt: • declaration_specifiers
   57                           | ε •  [IDENTIFIER, COMMA, LEFT_PARENTHESES, ASTERISK, SEMI_COLON, RIGHT_PARENTHESES]
   62 type_specifier: • VOIDTYPE
   63               | • INTTYPE
   68 type_qualifier: • CONST

    CONST     shift, and go to state 1
    INTTYPE   shift, and go to state 2
    VOIDTYPE  shift, and go to state 3

    $default  reduce using rule 57 (declaration_specifiers_opt)

    declaration_specifiers      go to state 20
    declaration_specifiers_opt  go to state 22
    type_specifier              go to state 6
    type_qualifier              go to state 7


State 8

    0 $accept: translation_unit • $end
   51 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   54 declaration_specifiers: • type_specifier declaration_specifiers_opt
   55                       | • type_qualifier declaration_specifiers_opt
   62 type_specifier: • VOIDTYPE
   63               | • INTTYPE
   68 type_qualifier: • CONST
  129 translation_unit: translation_unit • external_declaration
  130 external_declaration: • function_definition
  131                     | • declaration
  132 function_definition: • declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    $end      shift, and go to state 23
    CONST     shift, and go to state 1
    INTTYPE   shift, and go to state 2
    VOIDTYPE  shift, and go to state 3

    declaration             go to state 4
    declaration_specifiers  go to state 5
    type_specifier          go to state 6
    type_qualifier          go to state 7
    external_declaration    go to state 24
    function_definition     go to state 10


State 9

  128 translation_unit: external_declaration •

    $default  reduce using rule 128 (translation_unit)


State 10

  130 external_declaration: function_definition •

    $default  reduce using rule 130 (external_declaration)


State 11

   72 direct_declarator: IDENTIFIER •

    $default  reduce using rule 72 (direct_declarator)


State 12

   69 declarator: • pointer direct_declarator
   70           | • direct_declarator
   72 direct_declarator: • IDENTIFIER
   73                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
   73                  | LEFT_PARENTHESES • declarator RIGHT_PARENTHESES
   74                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
   75                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
   76                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
   77                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   78                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
   79                  | • direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
   80                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
   81                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
   82                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
   85 pointer: • ASTERISK type_qualifier_list_opt
   86        | • ASTERISK type_qualifier_list_opt pointer

    IDENTIFIER        shift, and go to state 11
    LEFT_PARENTHESES  shift, and go to state 12
    ASTERISK          shift, and go to state 13

    declarator         go to state 25
    direct_declarator  go to state 18
    pointer            go to state 19


State 13

   68 type_qualifier: • CONST
   83 type_qualifier_list_opt: • type_qualifier_list
   84                        | ε •  [IDENTIFIER, LEFT_PARENTHESES, ASTERISK]
   85 pointer: ASTERISK • type_qualifier_list_opt
   86        | ASTERISK • type_qualifier_list_opt pointer
   87 type_qualifier_list: • type_qualifier
   88                    | • type_qualifier_list type_qualifier

    CONST  shift, and go to state 1

    $default  reduce using rule 84 (type_qualifier_list_opt)

    type_qualifier           go to state 26
    type_qualifier_list_opt  go to state 27
    type_qualifier_list      go to state 28


State 14

   51 declaration: declaration_specifiers init_declarator_list_opt • SEMI_COLON

    SEMI_COLON  shift, and go to state 29


State 15

   52 init_declarator_list_opt: init_declarator_list •  [SEMI_COLON]
   59 init_declarator_list: init_declarator_list • COMMA init_declarator

    COMMA  shift, and go to state 30

    $default  reduce using rule 52 (init_declarator_list_opt)


State 16

   58 init_declarator_list: init_declarator •

    $default  reduce using rule 58 (init_declarator_list)


State 17

   51 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   54 declaration_specifiers: • type_specifier declaration_specifiers_opt
   55                       | • type_qualifier declaration_specifiers_opt
   60 init_declarator: declarator •  [COMMA, SEMI_COLON]
   61                | declarator • ASSIGNMENT initialiser
   62 type_specifier: • VOIDTYPE
   63               | • INTTYPE
   68 type_qualifier: • CONST
  132 function_definition: declaration_specifiers declarator • declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET
  133 declaration_list_opt: • declaration_list
  134                     | ε •  [LEFT_CURLY_BRACKET]
  135 declaration_list: • declaration
  136                 | • declaration_list declaration

    CONST       shift, and go to state 1
    INTTYPE     shift, and go to state 2
    VOIDTYPE    shift, and go to state 3
    ASSIGNMENT  shift, and go to state 31

    LEFT_CURLY_BRACKET  reduce using rule 134 (declaration_list_opt)
    $default            reduce using rule 60 (init_declarator)

    declaration             go to state 32
    declaration_specifiers  go to state 33
    type_specifier          go to state 6
    type_qualifier          go to state 7
    declaration_list_opt    go to state 34
    declaration_list        go to state 35


State 18

   70 declarator: direct_declarator •  [CONST, INTTYPE, VOIDTYPE, ASSIGNMENT, COMMA, LEFT_CURLY_BRACKET, SEMI_COLON, RIGHT_PARENTHESES]
   74 direct_declarator: direct_declarator • LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
   75                  | direct_declarator • LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
   76                  | direct_declarator • LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
   77                  | direct_declarator • LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   78                  | direct_declarator • LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
   79                  | direct_declarator • LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
   80                  | direct_declarator • LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
   81                  | direct_declarator • LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
   82                  | direct_declarator • LEFT_PARENTHESES change_scope RIGHT_PARENTHESES

    LEFT_SQUARE_BRACKET  shift, and go to state 36
    LEFT_PARENTHESES     shift, and go to state 37

    $default  reduce using rule 70 (declarator)


State 19

   69 declarator: pointer • direct_declarator
   72 direct_declarator: • IDENTIFIER
   73                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
   74                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
   75                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
   76                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
   77                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   78                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
   79                  | • direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
   80                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
   81                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
   82                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES

    IDENTIFIER        shift, and go to state 11
    LEFT_PARENTHESES  shift, and go to state 12

    direct_declarator  go to state 38


State 20

   56 declaration_specifiers_opt: declaration_specifiers •

    $default  reduce using rule 56 (declaration_specifiers_opt)


State 21

   54 declaration_specifiers: type_specifier declaration_specifiers_opt •

    $default  reduce using rule 54 (declaration_specifiers)


State 22

   55 declaration_specifiers: type_qualifier declaration_specifiers_opt •

    $default  reduce using rule 55 (declaration_specifiers)


State 23

    0 $accept: translation_unit $end •

    $default  accept


State 24

  129 translation_unit: translation_unit external_declaration •

    $default  reduce using rule 129 (translation_unit)


State 25

   73 direct_declarator: LEFT_PARENTHESES declarator • RIGHT_PARENTHESES

    RIGHT_PARENTHESES  shift, and go to state 39


State 26

   87 type_qualifier_list: type_qualifier •

    $default  reduce using rule 87 (type_qualifier_list)


State 27

   85 pointer: • ASTERISK type_qualifier_list_opt
   85        | ASTERISK type_qualifier_list_opt •  [IDENTIFIER, LEFT_PARENTHESES]
   86        | • ASTERISK type_qualifier_list_opt pointer
   86        | ASTERISK type_qualifier_list_opt • pointer

    ASTERISK  shift, and go to state 13

    $default  reduce using rule 85 (pointer)

    pointer  go to state 40


State 28

   68 type_qualifier: • CONST
   83 type_qualifier_list_opt: type_qualifier_list •  [IDENTIFIER, LEFT_PARENTHESES, ASTERISK]
   88 type_qualifier_list: type_qualifier_list • type_qualifier

    CONST  shift, and go to state 1

    $default  reduce using rule 83 (type_qualifier_list_opt)

    type_qualifier  go to state 41


State 29

   51 declaration: declaration_specifiers init_declarator_list_opt SEMI_COLON •

    $default  reduce using rule 51 (declaration)


State 30

   59 init_declarator_list: init_declarator_list COMMA • init_declarator
   60 init_declarator: • declarator
   61                | • declarator ASSIGNMENT initialiser
   69 declarator: • pointer direct_declarator
   70           | • direct_declarator
   72 direct_declarator: • IDENTIFIER
   73                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
   74                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
   75                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
   76                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
   77                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   78                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
   79                  | • direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
   80                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
   81                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
   82                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
   85 pointer: • ASTERISK type_qualifier_list_opt
   86        | • ASTERISK type_qualifier_list_opt pointer

    IDENTIFIER        shift, and go to state 11
    LEFT_PARENTHESES  shift, and go to state 12
    ASTERISK          shift, and go to state 13

    init_declarator    go to state 42
    declarator         go to state 43
    direct_declarator  go to state 18
    pointer            go to state 19


State 31

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   61 init_declarator: declarator ASSIGNMENT • initialiser
   97 initialiser: • assignment_expression
   98            | • LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   99            | • LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    LEFT_CURLY_BRACKET  shift, and go to state 50
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 66
    initialiser                go to state 67


State 32

  135 declaration_list: declaration •

    $default  reduce using rule 135 (declaration_list)


State 33

   51 declaration: declaration_specifiers • init_declarator_list_opt SEMI_COLON
   52 init_declarator_list_opt: • init_declarator_list
   53                         | ε •  [SEMI_COLON]
   58 init_declarator_list: • init_declarator
   59                     | • init_declarator_list COMMA init_declarator
   60 init_declarator: • declarator
   61                | • declarator ASSIGNMENT initialiser
   69 declarator: • pointer direct_declarator
   70           | • direct_declarator
   72 direct_declarator: • IDENTIFIER
   73                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
   74                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
   75                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
   76                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
   77                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   78                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
   79                  | • direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
   80                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
   81                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
   82                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
   85 pointer: • ASTERISK type_qualifier_list_opt
   86        | • ASTERISK type_qualifier_list_opt pointer

    IDENTIFIER        shift, and go to state 11
    LEFT_PARENTHESES  shift, and go to state 12
    ASTERISK          shift, and go to state 13

    $default  reduce using rule 53 (init_declarator_list_opt)

    init_declarator_list_opt  go to state 14
    init_declarator_list      go to state 15
    init_declarator           go to state 16
    declarator                go to state 43
    direct_declarator         go to state 18
    pointer                   go to state 19


State 34

   71 change_scope: ε •
  132 function_definition: declaration_specifiers declarator declaration_list_opt • change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    $default  reduce using rule 71 (change_scope)

    change_scope  go to state 68


State 35

   51 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   54 declaration_specifiers: • type_specifier declaration_specifiers_opt
   55                       | • type_qualifier declaration_specifiers_opt
   62 type_specifier: • VOIDTYPE
   63               | • INTTYPE
   68 type_qualifier: • CONST
  133 declaration_list_opt: declaration_list •  [LEFT_CURLY_BRACKET]
  136 declaration_list: declaration_list • declaration

    CONST     shift, and go to state 1
    INTTYPE   shift, and go to state 2
    VOIDTYPE  shift, and go to state 3

    $default  reduce using rule 133 (declaration_list_opt)

    declaration             go to state 69
    declaration_specifiers  go to state 33
    type_specifier          go to state 6
    type_qualifier          go to state 7


State 36

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   68 type_qualifier: • CONST
   74 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET • type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
   75                  | direct_declarator LEFT_SQUARE_BRACKET • type_qualifier_list RIGHT_SQUARE_BRACKET
   76                  | direct_declarator LEFT_SQUARE_BRACKET • assignment_expression RIGHT_SQUARE_BRACKET
   77                  | direct_declarator LEFT_SQUARE_BRACKET • RIGHT_SQUARE_BRACKET
   78                  | direct_declarator LEFT_SQUARE_BRACKET • type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
   79                  | direct_declarator LEFT_SQUARE_BRACKET • ASTERISK RIGHT_SQUARE_BRACKET
   87 type_qualifier_list: • type_qualifier
   88                    | • type_qualifier_list type_qualifier

    CONST                 shift, and go to state 1
    ADDRESS               shift, and go to state 44
    IDENTIFIER            shift, and go to state 45
    INTEGER_CONSTANT      shift, and go to state 46
    CHARACTER_CONSTANT    shift, and go to state 47
    STRING_LITERAL        shift, and go to state 48
    RIGHT_SQUARE_BRACKET  shift, and go to state 70
    LEFT_PARENTHESES      shift, and go to state 49
    ASTERISK              shift, and go to state 71
    PLUS                  shift, and go to state 52
    MINUS                 shift, and go to state 53
    EXCLAMATION           shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 72
    type_qualifier             go to state 26
    type_qualifier_list        go to state 73


State 37

   71 change_scope: ε •  [CONST, INTTYPE, VOIDTYPE, RIGHT_PARENTHESES]
   80 direct_declarator: direct_declarator LEFT_PARENTHESES • change_scope parameter_type_list RIGHT_PARENTHESES
   81                  | direct_declarator LEFT_PARENTHESES • identifier_list RIGHT_PARENTHESES
   82                  | direct_declarator LEFT_PARENTHESES • change_scope RIGHT_PARENTHESES
   94 identifier_list: • IDENTIFIER
   95                | • identifier_list COMMA IDENTIFIER

    IDENTIFIER  shift, and go to state 74

    $default  reduce using rule 71 (change_scope)

    change_scope     go to state 75
    identifier_list  go to state 76


State 38

   69 declarator: pointer direct_declarator •  [CONST, INTTYPE, VOIDTYPE, ASSIGNMENT, COMMA, LEFT_CURLY_BRACKET, SEMI_COLON, RIGHT_PARENTHESES]
   74 direct_declarator: direct_declarator • LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
   75                  | direct_declarator • LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
   76                  | direct_declarator • LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
   77                  | direct_declarator • LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   78                  | direct_declarator • LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
   79                  | direct_declarator • LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
   80                  | direct_declarator • LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
   81                  | direct_declarator • LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
   82                  | direct_declarator • LEFT_PARENTHESES change_scope RIGHT_PARENTHESES

    LEFT_SQUARE_BRACKET  shift, and go to state 36
    LEFT_PARENTHESES     shift, and go to state 37

    $default  reduce using rule 69 (declarator)


State 39

   73 direct_declarator: LEFT_PARENTHESES declarator RIGHT_PARENTHESES •

    $default  reduce using rule 73 (direct_declarator)


State 40

   86 pointer: ASTERISK type_qualifier_list_opt pointer •

    $default  reduce using rule 86 (pointer)


State 41

   88 type_qualifier_list: type_qualifier_list type_qualifier •

    $default  reduce using rule 88 (type_qualifier_list)


State 42

   59 init_declarator_list: init_declarator_list COMMA init_declarator •

    $default  reduce using rule 59 (init_declarator_list)


State 43

   60 init_declarator: declarator •  [COMMA, SEMI_COLON]
   61                | declarator • ASSIGNMENT initialiser

    ASSIGNMENT  shift, and go to state 31

    $default  reduce using rule 60 (init_declarator)


State 44

   22 unary_operator: ADDRESS •

    $default  reduce using rule 22 (unary_operator)


State 45

    1 primary_expression: IDENTIFIER •

    $default  reduce using rule 1 (primary_expression)


State 46

    2 primary_expression: INTEGER_CONSTANT •

    $default  reduce using rule 2 (primary_expression)


State 47

    3 primary_expression: CHARACTER_CONSTANT •

    $default  reduce using rule 3 (primary_expression)


State 48

    4 primary_expression: STRING_LITERAL •

    $default  reduce using rule 4 (primary_expression)


State 49

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    5                   | LEFT_PARENTHESES • expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   10                   | LEFT_PARENTHESES • type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   11                   | LEFT_PARENTHESES • type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   48 expression: • assignment_expression
   49           | • expression COMMA assignment_expression
   62 type_specifier: • VOIDTYPE
   63               | • INTTYPE
   64 specifier_qualifier_list: • type_specifier specifier_qualifier_list_opt
   65                         | • type_qualifier specifier_qualifier_list_opt
   68 type_qualifier: • CONST
   96 type_name: • specifier_qualifier_list

    CONST               shift, and go to state 1
    ADDRESS             shift, and go to state 44
    INTTYPE             shift, and go to state 2
    VOIDTYPE            shift, and go to state 3
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 77
    expression                 go to state 78
    type_specifier             go to state 79
    specifier_qualifier_list   go to state 80
    type_qualifier             go to state 81
    type_name                  go to state 82


State 50

   98 initialiser: LEFT_CURLY_BRACKET • initialiser_list RIGHT_CURLY_BRACKET
   99            | LEFT_CURLY_BRACKET • initialiser_list COMMA RIGHT_CURLY_BRACKET
  100 initialiser_list: • designation_opt initialiser
  101                 | • initialiser_list COMMA designation_opt initialiser
  102 designation_opt: • designation
  103                | ε •  [ADDRESS, IDENTIFIER, INTEGER_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, EXCLAMATION]
  104 designation: • designator_list ASSIGNMENT
  105 designator_list: • designator
  106                | • designator_list designator
  107 designator: • LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET

    LEFT_SQUARE_BRACKET  shift, and go to state 83

    $default  reduce using rule 103 (designation_opt)

    initialiser_list  go to state 84
    designation_opt   go to state 85
    designation       go to state 86
    designator_list   go to state 87
    designator        go to state 88


State 51

   18 unary_operator: ASTERISK •

    $default  reduce using rule 18 (unary_operator)


State 52

   19 unary_operator: PLUS •

    $default  reduce using rule 19 (unary_operator)


State 53

   20 unary_operator: MINUS •

    $default  reduce using rule 20 (unary_operator)


State 54

   21 unary_operator: EXCLAMATION •

    $default  reduce using rule 21 (unary_operator)


State 55

    6 postfix_expression: primary_expression •

    $default  reduce using rule 6 (postfix_expression)


State 56

    7 postfix_expression: postfix_expression • LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | postfix_expression • LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | postfix_expression • ARROW IDENTIFIER
   16 unary_expression: postfix_expression •  [SLASH, QUESTION_MARK, ASSIGNMENT, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, MODULO, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, EQUALS, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LEFT_SQUARE_BRACKET  shift, and go to state 89
    LEFT_PARENTHESES     shift, and go to state 90
    ARROW                shift, and go to state 91

    $default  reduce using rule 16 (unary_expression)


State 57

   23 multiplicative_expression: unary_expression •  [SLASH, QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, MODULO, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, EQUALS, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]
   47 assignment_expression: unary_expression • ASSIGNMENT assignment_expression

    ASSIGNMENT  shift, and go to state 92

    $default  reduce using rule 23 (multiplicative_expression)


State 58

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   17                 | unary_operator • unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression  go to state 55
    postfix_expression  go to state 56
    unary_expression    go to state 93
    unary_operator      go to state 58


State 59

   24 multiplicative_expression: multiplicative_expression • ASTERISK unary_expression
   25                          | multiplicative_expression • SLASH unary_expression
   26                          | multiplicative_expression • MODULO unary_expression
   27 additive_expression: multiplicative_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, PLUS, MINUS, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, EQUALS, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    SLASH     shift, and go to state 94
    ASTERISK  shift, and go to state 95
    MODULO    shift, and go to state 96

    $default  reduce using rule 27 (additive_expression)


State 60

   28 additive_expression: additive_expression • PLUS multiplicative_expression
   29                    | additive_expression • MINUS multiplicative_expression
   30 relational_expression: additive_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, EQUALS, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    PLUS   shift, and go to state 97
    MINUS  shift, and go to state 98

    $default  reduce using rule 30 (relational_expression)


State 61

   31 relational_expression: relational_expression • LESS_THAN additive_expression
   32                      | relational_expression • GREATER_THAN additive_expression
   33                      | relational_expression • LESS_EQUAL_THAN additive_expression
   34                      | relational_expression • GREATER_EQUAL_THAN additive_expression
   35 equality_expression: relational_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, EQUALS, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LESS_THAN           shift, and go to state 99
    GREATER_THAN        shift, and go to state 100
    LESS_EQUAL_THAN     shift, and go to state 101
    GREATER_EQUAL_THAN  shift, and go to state 102

    $default  reduce using rule 35 (equality_expression)


State 62

   36 equality_expression: equality_expression • EQUALS relational_expression
   37                    | equality_expression • NOT_EQUALS relational_expression
   40 logical_AND_expression: equality_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, LOGICAL_AND, LOGICAL_OR]

    EQUALS      shift, and go to state 103
    NOT_EQUALS  shift, and go to state 104

    $default  reduce using rule 40 (logical_AND_expression)


State 63

   41 logical_AND_expression: logical_AND_expression • LOGICAL_AND M equality_expression
   42 logical_OR_expression: logical_AND_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, LOGICAL_OR]

    LOGICAL_AND  shift, and go to state 105

    $default  reduce using rule 42 (logical_OR_expression)


State 64

   39 N: ε •  [QUESTION_MARK]
   43 logical_OR_expression: logical_OR_expression • LOGICAL_OR M logical_AND_expression
   44 conditional_expression: logical_OR_expression •  [COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES]
   45                       | logical_OR_expression • N QUESTION_MARK M expression N COLON M conditional_expression

    LOGICAL_OR  shift, and go to state 106

    QUESTION_MARK  reduce using rule 39 (N)
    $default       reduce using rule 44 (conditional_expression)

    N  go to state 107


State 65

   46 assignment_expression: conditional_expression •

    $default  reduce using rule 46 (assignment_expression)


State 66

   97 initialiser: assignment_expression •

    $default  reduce using rule 97 (initialiser)


State 67

   61 init_declarator: declarator ASSIGNMENT initialiser •

    $default  reduce using rule 61 (init_declarator)


State 68

  132 function_definition: declaration_specifiers declarator declaration_list_opt change_scope • LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 108


State 69

  136 declaration_list: declaration_list declaration •

    $default  reduce using rule 136 (declaration_list)


State 70

   77 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 77 (direct_declarator)


State 71

   18 unary_operator: ASTERISK •  [ADDRESS, IDENTIFIER, INTEGER_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, LEFT_PARENTHESES, ASTERISK, PLUS, MINUS, EXCLAMATION]
   79 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET ASTERISK • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 109

    $default  reduce using rule 18 (unary_operator)


State 72

   76 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET assignment_expression • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 110


State 73

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   68 type_qualifier: • CONST
   74 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list • assignment_expression RIGHT_SQUARE_BRACKET
   75                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list • RIGHT_SQUARE_BRACKET
   78                  | direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list • ASTERISK RIGHT_SQUARE_BRACKET
   88 type_qualifier_list: type_qualifier_list • type_qualifier

    CONST                 shift, and go to state 1
    ADDRESS               shift, and go to state 44
    IDENTIFIER            shift, and go to state 45
    INTEGER_CONSTANT      shift, and go to state 46
    CHARACTER_CONSTANT    shift, and go to state 47
    STRING_LITERAL        shift, and go to state 48
    RIGHT_SQUARE_BRACKET  shift, and go to state 111
    LEFT_PARENTHESES      shift, and go to state 49
    ASTERISK              shift, and go to state 112
    PLUS                  shift, and go to state 52
    MINUS                 shift, and go to state 53
    EXCLAMATION           shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 113
    type_qualifier             go to state 41


State 74

   94 identifier_list: IDENTIFIER •

    $default  reduce using rule 94 (identifier_list)


State 75

   54 declaration_specifiers: • type_specifier declaration_specifiers_opt
   55                       | • type_qualifier declaration_specifiers_opt
   62 type_specifier: • VOIDTYPE
   63               | • INTTYPE
   68 type_qualifier: • CONST
   80 direct_declarator: direct_declarator LEFT_PARENTHESES change_scope • parameter_type_list RIGHT_PARENTHESES
   82                  | direct_declarator LEFT_PARENTHESES change_scope • RIGHT_PARENTHESES
   89 parameter_type_list: • parameter_list
   90 parameter_list: • parameter_declaration
   91               | • parameter_list COMMA parameter_declaration
   92 parameter_declaration: • declaration_specifiers declarator
   93                      | • declaration_specifiers

    CONST              shift, and go to state 1
    INTTYPE            shift, and go to state 2
    VOIDTYPE           shift, and go to state 3
    RIGHT_PARENTHESES  shift, and go to state 114

    declaration_specifiers  go to state 115
    type_specifier          go to state 6
    type_qualifier          go to state 7
    parameter_type_list     go to state 116
    parameter_list          go to state 117
    parameter_declaration   go to state 118


State 76

   81 direct_declarator: direct_declarator LEFT_PARENTHESES identifier_list • RIGHT_PARENTHESES
   95 identifier_list: identifier_list • COMMA IDENTIFIER

    COMMA              shift, and go to state 119
    RIGHT_PARENTHESES  shift, and go to state 120


State 77

   48 expression: assignment_expression •

    $default  reduce using rule 48 (expression)


State 78

    5 primary_expression: LEFT_PARENTHESES expression • RIGHT_PARENTHESES
   49 expression: expression • COMMA assignment_expression

    COMMA              shift, and go to state 121
    RIGHT_PARENTHESES  shift, and go to state 122


State 79

   62 type_specifier: • VOIDTYPE
   63               | • INTTYPE
   64 specifier_qualifier_list: • type_specifier specifier_qualifier_list_opt
   64                         | type_specifier • specifier_qualifier_list_opt
   65                         | • type_qualifier specifier_qualifier_list_opt
   66 specifier_qualifier_list_opt: • specifier_qualifier_list
   67                             | ε •  [RIGHT_PARENTHESES]
   68 type_qualifier: • CONST

    CONST     shift, and go to state 1
    INTTYPE   shift, and go to state 2
    VOIDTYPE  shift, and go to state 3

    $default  reduce using rule 67 (specifier_qualifier_list_opt)

    type_specifier                go to state 79
    specifier_qualifier_list      go to state 123
    specifier_qualifier_list_opt  go to state 124
    type_qualifier                go to state 81


State 80

   96 type_name: specifier_qualifier_list •

    $default  reduce using rule 96 (type_name)


State 81

   62 type_specifier: • VOIDTYPE
   63               | • INTTYPE
   64 specifier_qualifier_list: • type_specifier specifier_qualifier_list_opt
   65                         | • type_qualifier specifier_qualifier_list_opt
   65                         | type_qualifier • specifier_qualifier_list_opt
   66 specifier_qualifier_list_opt: • specifier_qualifier_list
   67                             | ε •  [RIGHT_PARENTHESES]
   68 type_qualifier: • CONST

    CONST     shift, and go to state 1
    INTTYPE   shift, and go to state 2
    VOIDTYPE  shift, and go to state 3

    $default  reduce using rule 67 (specifier_qualifier_list_opt)

    type_specifier                go to state 79
    specifier_qualifier_list      go to state 123
    specifier_qualifier_list_opt  go to state 125
    type_qualifier                go to state 81


State 82

   10 postfix_expression: LEFT_PARENTHESES type_name • RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | LEFT_PARENTHESES type_name • RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET

    RIGHT_PARENTHESES  shift, and go to state 126


State 83

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   50 constant_expression: • conditional_expression
  107 designator: LEFT_SQUARE_BRACKET • constant_expression RIGHT_SQUARE_BRACKET

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 127
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 128
    constant_expression        go to state 129


State 84

   98 initialiser: LEFT_CURLY_BRACKET initialiser_list • RIGHT_CURLY_BRACKET
   99            | LEFT_CURLY_BRACKET initialiser_list • COMMA RIGHT_CURLY_BRACKET
  101 initialiser_list: initialiser_list • COMMA designation_opt initialiser

    COMMA                shift, and go to state 130
    RIGHT_CURLY_BRACKET  shift, and go to state 131


State 85

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   97 initialiser: • assignment_expression
   98            | • LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   99            | • LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
  100 initialiser_list: designation_opt • initialiser

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    LEFT_CURLY_BRACKET  shift, and go to state 50
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 66
    initialiser                go to state 132


State 86

  102 designation_opt: designation •

    $default  reduce using rule 102 (designation_opt)


State 87

  104 designation: designator_list • ASSIGNMENT
  106 designator_list: designator_list • designator
  107 designator: • LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET

    LEFT_SQUARE_BRACKET  shift, and go to state 83
    ASSIGNMENT           shift, and go to state 133

    designator  go to state 134


State 88

  105 designator_list: designator •

    $default  reduce using rule 105 (designator_list)


State 89

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    7                   | postfix_expression LEFT_SQUARE_BRACKET • expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   48 expression: • assignment_expression
   49           | • expression COMMA assignment_expression

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 77
    expression                 go to state 135


State 90

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    8                   | postfix_expression LEFT_PARENTHESES • argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   12 argument_expression_list_opt: • argument_expression_list
   13                             | ε •  [RIGHT_PARENTHESES]
   14 argument_expression_list: • assignment_expression
   15                         | • argument_expression_list COMMA assignment_expression
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    $default  reduce using rule 13 (argument_expression_list_opt)

    primary_expression            go to state 55
    postfix_expression            go to state 56
    argument_expression_list_opt  go to state 136
    argument_expression_list      go to state 137
    unary_expression              go to state 57
    unary_operator                go to state 58
    multiplicative_expression     go to state 59
    additive_expression           go to state 60
    relational_expression         go to state 61
    equality_expression           go to state 62
    logical_AND_expression        go to state 63
    logical_OR_expression         go to state 64
    conditional_expression        go to state 65
    assignment_expression         go to state 138


State 91

    9 postfix_expression: postfix_expression ARROW • IDENTIFIER

    IDENTIFIER  shift, and go to state 139


State 92

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   47                      | unary_expression ASSIGNMENT • assignment_expression

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 140


State 93

   17 unary_expression: unary_operator unary_expression •

    $default  reduce using rule 17 (unary_expression)


State 94

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   25 multiplicative_expression: multiplicative_expression SLASH • unary_expression

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression  go to state 55
    postfix_expression  go to state 56
    unary_expression    go to state 141
    unary_operator      go to state 58


State 95

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   24 multiplicative_expression: multiplicative_expression ASTERISK • unary_expression

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression  go to state 55
    postfix_expression  go to state 56
    unary_expression    go to state 142
    unary_operator      go to state 58


State 96

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   26 multiplicative_expression: multiplicative_expression MODULO • unary_expression

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression  go to state 55
    postfix_expression  go to state 56
    unary_expression    go to state 143
    unary_operator      go to state 58


State 97

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   28 additive_expression: additive_expression PLUS • multiplicative_expression

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 127
    unary_operator             go to state 58
    multiplicative_expression  go to state 144


State 98

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   29 additive_expression: additive_expression MINUS • multiplicative_expression

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 127
    unary_operator             go to state 58
    multiplicative_expression  go to state 145


State 99

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   31 relational_expression: relational_expression LESS_THAN • additive_expression

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 127
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 146


State 100

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   32 relational_expression: relational_expression GREATER_THAN • additive_expression

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 127
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 147


State 101

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   33 relational_expression: relational_expression LESS_EQUAL_THAN • additive_expression

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 127
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 148


State 102

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   34 relational_expression: relational_expression GREATER_EQUAL_THAN • additive_expression

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 127
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 149


State 103

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   36 equality_expression: equality_expression EQUALS • relational_expression

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 127
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 150


State 104

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   37 equality_expression: equality_expression NOT_EQUALS • relational_expression

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 127
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 151


State 105

   38 M: ε •
   41 logical_AND_expression: logical_AND_expression LOGICAL_AND • M equality_expression

    $default  reduce using rule 38 (M)

    M  go to state 152


State 106

   38 M: ε •
   43 logical_OR_expression: logical_OR_expression LOGICAL_OR • M logical_AND_expression

    $default  reduce using rule 38 (M)

    M  go to state 153


State 107

   45 conditional_expression: logical_OR_expression N • QUESTION_MARK M expression N COLON M conditional_expression

    QUESTION_MARK  shift, and go to state 154


State 108

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   48 expression: • assignment_expression
   49           | • expression COMMA assignment_expression
   51 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   54 declaration_specifiers: • type_specifier declaration_specifiers_opt
   55                       | • type_qualifier declaration_specifiers_opt
   62 type_specifier: • VOIDTYPE
   63               | • INTTYPE
   68 type_qualifier: • CONST
  108 statement: • compound_statement
  109          | • expression_statement
  110          | • selection_statement
  111          | • iteration_statement
  112          | • jump_statement
  113 compound_statement: • BEGIN block_item_list_opt END
  114 block_item_list_opt: • block_item_list
  115                    | ε •  [RIGHT_CURLY_BRACKET]
  116 block_item_list: • block_item
  117                | • block_item_list M block_item
  118 block_item: • declaration
  119           | • statement
  120 expression_statement: • expression_opt SEMI_COLON
  121 expression_opt: • expression
  122               | ε •  [SEMI_COLON]
  123 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  124                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  125 iteration_statement: • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  126                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  127 jump_statement: • RETURN expression_opt SEMI_COLON
  132 function_definition: declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET • block_item_list_opt RIGHT_CURLY_BRACKET

    BEGIN               shift, and go to state 155
    CONST               shift, and go to state 1
    FOR                 shift, and go to state 156
    IF                  shift, and go to state 157
    ADDRESS             shift, and go to state 44
    INTTYPE             shift, and go to state 2
    RETURN              shift, and go to state 158
    VOIDTYPE            shift, and go to state 3
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    SEMI_COLON  reduce using rule 122 (expression_opt)
    $default    reduce using rule 115 (block_item_list_opt)

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 77
    expression                 go to state 159
    declaration                go to state 160
    declaration_specifiers     go to state 33
    type_specifier             go to state 6
    type_qualifier             go to state 7
    statement                  go to state 161
    compound_statement         go to state 162
    block_item_list_opt        go to state 163
    block_item_list            go to state 164
    block_item                 go to state 165
    expression_statement       go to state 166
    expression_opt             go to state 167
    selection_statement        go to state 168
    iteration_statement        go to state 169
    jump_statement             go to state 170


State 109

   79 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 79 (direct_declarator)


State 110

   76 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 76 (direct_declarator)


State 111

   75 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 75 (direct_declarator)


State 112

   18 unary_operator: ASTERISK •  [ADDRESS, IDENTIFIER, INTEGER_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, LEFT_PARENTHESES, ASTERISK, PLUS, MINUS, EXCLAMATION]
   78 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 171

    $default  reduce using rule 18 (unary_operator)


State 113

   74 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 172


State 114

   82 direct_declarator: direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES •

    $default  reduce using rule 82 (direct_declarator)


State 115

   69 declarator: • pointer direct_declarator
   70           | • direct_declarator
   72 direct_declarator: • IDENTIFIER
   73                  | • LEFT_PARENTHESES declarator RIGHT_PARENTHESES
   74                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET
   75                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list RIGHT_SQUARE_BRACKET
   76                  | • direct_declarator LEFT_SQUARE_BRACKET assignment_expression RIGHT_SQUARE_BRACKET
   77                  | • direct_declarator LEFT_SQUARE_BRACKET RIGHT_SQUARE_BRACKET
   78                  | • direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET
   79                  | • direct_declarator LEFT_SQUARE_BRACKET ASTERISK RIGHT_SQUARE_BRACKET
   80                  | • direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES
   81                  | • direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES
   82                  | • direct_declarator LEFT_PARENTHESES change_scope RIGHT_PARENTHESES
   85 pointer: • ASTERISK type_qualifier_list_opt
   86        | • ASTERISK type_qualifier_list_opt pointer
   92 parameter_declaration: declaration_specifiers • declarator
   93                      | declaration_specifiers •  [COMMA, RIGHT_PARENTHESES]

    IDENTIFIER        shift, and go to state 11
    LEFT_PARENTHESES  shift, and go to state 12
    ASTERISK          shift, and go to state 13

    $default  reduce using rule 93 (parameter_declaration)

    declarator         go to state 173
    direct_declarator  go to state 18
    pointer            go to state 19


State 116

   80 direct_declarator: direct_declarator LEFT_PARENTHESES change_scope parameter_type_list • RIGHT_PARENTHESES

    RIGHT_PARENTHESES  shift, and go to state 174


State 117

   89 parameter_type_list: parameter_list •  [RIGHT_PARENTHESES]
   91 parameter_list: parameter_list • COMMA parameter_declaration

    COMMA  shift, and go to state 175

    $default  reduce using rule 89 (parameter_type_list)


State 118

   90 parameter_list: parameter_declaration •

    $default  reduce using rule 90 (parameter_list)


State 119

   95 identifier_list: identifier_list COMMA • IDENTIFIER

    IDENTIFIER  shift, and go to state 176


State 120

   81 direct_declarator: direct_declarator LEFT_PARENTHESES identifier_list RIGHT_PARENTHESES •

    $default  reduce using rule 81 (direct_declarator)


State 121

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   49 expression: expression COMMA • assignment_expression

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 177


State 122

    5 primary_expression: LEFT_PARENTHESES expression RIGHT_PARENTHESES •

    $default  reduce using rule 5 (primary_expression)


State 123

   66 specifier_qualifier_list_opt: specifier_qualifier_list •

    $default  reduce using rule 66 (specifier_qualifier_list_opt)


State 124

   64 specifier_qualifier_list: type_specifier specifier_qualifier_list_opt •

    $default  reduce using rule 64 (specifier_qualifier_list)


State 125

   65 specifier_qualifier_list: type_qualifier specifier_qualifier_list_opt •

    $default  reduce using rule 65 (specifier_qualifier_list)


State 126

   10 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES • LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES • LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET

    LEFT_CURLY_BRACKET  shift, and go to state 178


State 127

   23 multiplicative_expression: unary_expression •

    $default  reduce using rule 23 (multiplicative_expression)


State 128

   50 constant_expression: conditional_expression •

    $default  reduce using rule 50 (constant_expression)


State 129

  107 designator: LEFT_SQUARE_BRACKET constant_expression • RIGHT_SQUARE_BRACKET

    RIGHT_SQUARE_BRACKET  shift, and go to state 179


State 130

   99 initialiser: LEFT_CURLY_BRACKET initialiser_list COMMA • RIGHT_CURLY_BRACKET
  101 initialiser_list: initialiser_list COMMA • designation_opt initialiser
  102 designation_opt: • designation
  103                | ε •  [ADDRESS, IDENTIFIER, INTEGER_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, EXCLAMATION]
  104 designation: • designator_list ASSIGNMENT
  105 designator_list: • designator
  106                | • designator_list designator
  107 designator: • LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET

    LEFT_SQUARE_BRACKET  shift, and go to state 83
    RIGHT_CURLY_BRACKET  shift, and go to state 180

    $default  reduce using rule 103 (designation_opt)

    designation_opt  go to state 181
    designation      go to state 86
    designator_list  go to state 87
    designator       go to state 88


State 131

   98 initialiser: LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET •

    $default  reduce using rule 98 (initialiser)


State 132

  100 initialiser_list: designation_opt initialiser •

    $default  reduce using rule 100 (initialiser_list)


State 133

  104 designation: designator_list ASSIGNMENT •

    $default  reduce using rule 104 (designation)


State 134

  106 designator_list: designator_list designator •

    $default  reduce using rule 106 (designator_list)


State 135

    7 postfix_expression: postfix_expression LEFT_SQUARE_BRACKET expression • RIGHT_SQUARE_BRACKET
   49 expression: expression • COMMA assignment_expression

    COMMA                 shift, and go to state 121
    RIGHT_SQUARE_BRACKET  shift, and go to state 182


State 136

    8 postfix_expression: postfix_expression LEFT_PARENTHESES argument_expression_list_opt • RIGHT_PARENTHESES

    RIGHT_PARENTHESES  shift, and go to state 183


State 137

   12 argument_expression_list_opt: argument_expression_list •  [RIGHT_PARENTHESES]
   15 argument_expression_list: argument_expression_list • COMMA assignment_expression

    COMMA  shift, and go to state 184

    $default  reduce using rule 12 (argument_expression_list_opt)


State 138

   14 argument_expression_list: assignment_expression •

    $default  reduce using rule 14 (argument_expression_list)


State 139

    9 postfix_expression: postfix_expression ARROW IDENTIFIER •

    $default  reduce using rule 9 (postfix_expression)


State 140

   47 assignment_expression: unary_expression ASSIGNMENT assignment_expression •

    $default  reduce using rule 47 (assignment_expression)


State 141

   25 multiplicative_expression: multiplicative_expression SLASH unary_expression •

    $default  reduce using rule 25 (multiplicative_expression)


State 142

   24 multiplicative_expression: multiplicative_expression ASTERISK unary_expression •

    $default  reduce using rule 24 (multiplicative_expression)


State 143

   26 multiplicative_expression: multiplicative_expression MODULO unary_expression •

    $default  reduce using rule 26 (multiplicative_expression)


State 144

   24 multiplicative_expression: multiplicative_expression • ASTERISK unary_expression
   25                          | multiplicative_expression • SLASH unary_expression
   26                          | multiplicative_expression • MODULO unary_expression
   28 additive_expression: additive_expression PLUS multiplicative_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, PLUS, MINUS, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, EQUALS, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    SLASH     shift, and go to state 94
    ASTERISK  shift, and go to state 95
    MODULO    shift, and go to state 96

    $default  reduce using rule 28 (additive_expression)


State 145

   24 multiplicative_expression: multiplicative_expression • ASTERISK unary_expression
   25                          | multiplicative_expression • SLASH unary_expression
   26                          | multiplicative_expression • MODULO unary_expression
   29 additive_expression: additive_expression MINUS multiplicative_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, PLUS, MINUS, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, EQUALS, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    SLASH     shift, and go to state 94
    ASTERISK  shift, and go to state 95
    MODULO    shift, and go to state 96

    $default  reduce using rule 29 (additive_expression)


State 146

   28 additive_expression: additive_expression • PLUS multiplicative_expression
   29                    | additive_expression • MINUS multiplicative_expression
   31 relational_expression: relational_expression LESS_THAN additive_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, EQUALS, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    PLUS   shift, and go to state 97
    MINUS  shift, and go to state 98

    $default  reduce using rule 31 (relational_expression)


State 147

   28 additive_expression: additive_expression • PLUS multiplicative_expression
   29                    | additive_expression • MINUS multiplicative_expression
   32 relational_expression: relational_expression GREATER_THAN additive_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, EQUALS, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    PLUS   shift, and go to state 97
    MINUS  shift, and go to state 98

    $default  reduce using rule 32 (relational_expression)


State 148

   28 additive_expression: additive_expression • PLUS multiplicative_expression
   29                    | additive_expression • MINUS multiplicative_expression
   33 relational_expression: relational_expression LESS_EQUAL_THAN additive_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, EQUALS, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    PLUS   shift, and go to state 97
    MINUS  shift, and go to state 98

    $default  reduce using rule 33 (relational_expression)


State 149

   28 additive_expression: additive_expression • PLUS multiplicative_expression
   29                    | additive_expression • MINUS multiplicative_expression
   34 relational_expression: relational_expression GREATER_EQUAL_THAN additive_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, LESS_THAN, GREATER_THAN, LESS_EQUAL_THAN, GREATER_EQUAL_THAN, COLON, SEMI_COLON, RIGHT_PARENTHESES, EQUALS, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    PLUS   shift, and go to state 97
    MINUS  shift, and go to state 98

    $default  reduce using rule 34 (relational_expression)


State 150

   31 relational_expression: relational_expression • LESS_THAN additive_expression
   32                      | relational_expression • GREATER_THAN additive_expression
   33                      | relational_expression • LESS_EQUAL_THAN additive_expression
   34                      | relational_expression • GREATER_EQUAL_THAN additive_expression
   36 equality_expression: equality_expression EQUALS relational_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, EQUALS, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LESS_THAN           shift, and go to state 99
    GREATER_THAN        shift, and go to state 100
    LESS_EQUAL_THAN     shift, and go to state 101
    GREATER_EQUAL_THAN  shift, and go to state 102

    $default  reduce using rule 36 (equality_expression)


State 151

   31 relational_expression: relational_expression • LESS_THAN additive_expression
   32                      | relational_expression • GREATER_THAN additive_expression
   33                      | relational_expression • LESS_EQUAL_THAN additive_expression
   34                      | relational_expression • GREATER_EQUAL_THAN additive_expression
   37 equality_expression: equality_expression NOT_EQUALS relational_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, EQUALS, LOGICAL_AND, LOGICAL_OR, NOT_EQUALS]

    LESS_THAN           shift, and go to state 99
    GREATER_THAN        shift, and go to state 100
    LESS_EQUAL_THAN     shift, and go to state 101
    GREATER_EQUAL_THAN  shift, and go to state 102

    $default  reduce using rule 37 (equality_expression)


State 152

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   41 logical_AND_expression: logical_AND_expression LOGICAL_AND M • equality_expression

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 127
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 185


State 153

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   43 logical_OR_expression: logical_OR_expression LOGICAL_OR M • logical_AND_expression

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 127
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 186


State 154

   38 M: ε •
   45 conditional_expression: logical_OR_expression N QUESTION_MARK • M expression N COLON M conditional_expression

    $default  reduce using rule 38 (M)

    M  go to state 187


State 155

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   48 expression: • assignment_expression
   49           | • expression COMMA assignment_expression
   51 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   54 declaration_specifiers: • type_specifier declaration_specifiers_opt
   55                       | • type_qualifier declaration_specifiers_opt
   62 type_specifier: • VOIDTYPE
   63               | • INTTYPE
   68 type_qualifier: • CONST
  108 statement: • compound_statement
  109          | • expression_statement
  110          | • selection_statement
  111          | • iteration_statement
  112          | • jump_statement
  113 compound_statement: • BEGIN block_item_list_opt END
  113                   | BEGIN • block_item_list_opt END
  114 block_item_list_opt: • block_item_list
  115                    | ε •  [END]
  116 block_item_list: • block_item
  117                | • block_item_list M block_item
  118 block_item: • declaration
  119           | • statement
  120 expression_statement: • expression_opt SEMI_COLON
  121 expression_opt: • expression
  122               | ε •  [SEMI_COLON]
  123 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  124                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  125 iteration_statement: • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  126                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  127 jump_statement: • RETURN expression_opt SEMI_COLON

    BEGIN               shift, and go to state 155
    CONST               shift, and go to state 1
    FOR                 shift, and go to state 156
    IF                  shift, and go to state 157
    ADDRESS             shift, and go to state 44
    INTTYPE             shift, and go to state 2
    RETURN              shift, and go to state 158
    VOIDTYPE            shift, and go to state 3
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    SEMI_COLON  reduce using rule 122 (expression_opt)
    $default    reduce using rule 115 (block_item_list_opt)

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 77
    expression                 go to state 159
    declaration                go to state 160
    declaration_specifiers     go to state 33
    type_specifier             go to state 6
    type_qualifier             go to state 7
    statement                  go to state 161
    compound_statement         go to state 162
    block_item_list_opt        go to state 188
    block_item_list            go to state 164
    block_item                 go to state 165
    expression_statement       go to state 166
    expression_opt             go to state 167
    selection_statement        go to state 168
    iteration_statement        go to state 169
    jump_statement             go to state 170


State 156

  125 iteration_statement: FOR • LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  126                    | FOR • LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement

    LEFT_PARENTHESES  shift, and go to state 189


State 157

  123 selection_statement: IF • LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  124                    | IF • LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement

    LEFT_PARENTHESES  shift, and go to state 190


State 158

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   48 expression: • assignment_expression
   49           | • expression COMMA assignment_expression
  121 expression_opt: • expression
  122               | ε •  [SEMI_COLON]
  127 jump_statement: RETURN • expression_opt SEMI_COLON

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    $default  reduce using rule 122 (expression_opt)

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 77
    expression                 go to state 159
    expression_opt             go to state 191


State 159

   49 expression: expression • COMMA assignment_expression
  121 expression_opt: expression •  [SEMI_COLON, RIGHT_PARENTHESES]

    COMMA  shift, and go to state 121

    $default  reduce using rule 121 (expression_opt)


State 160

  118 block_item: declaration •

    $default  reduce using rule 118 (block_item)


State 161

  119 block_item: statement •

    $default  reduce using rule 119 (block_item)


State 162

  108 statement: compound_statement •

    $default  reduce using rule 108 (statement)


State 163

  132 function_definition: declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt • RIGHT_CURLY_BRACKET

    RIGHT_CURLY_BRACKET  shift, and go to state 192


State 164

   38 M: ε •  [BEGIN, CONST, FOR, IF, ADDRESS, INTTYPE, RETURN, VOIDTYPE, IDENTIFIER, INTEGER_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, LEFT_PARENTHESES, ASTERISK, PLUS, MINUS, EXCLAMATION, SEMI_COLON]
  114 block_item_list_opt: block_item_list •  [END, RIGHT_CURLY_BRACKET]
  117 block_item_list: block_item_list • M block_item

    END                  reduce using rule 114 (block_item_list_opt)
    RIGHT_CURLY_BRACKET  reduce using rule 114 (block_item_list_opt)
    $default             reduce using rule 38 (M)

    M  go to state 193


State 165

  116 block_item_list: block_item •

    $default  reduce using rule 116 (block_item_list)


State 166

  109 statement: expression_statement •

    $default  reduce using rule 109 (statement)


State 167

  120 expression_statement: expression_opt • SEMI_COLON

    SEMI_COLON  shift, and go to state 194


State 168

  110 statement: selection_statement •

    $default  reduce using rule 110 (statement)


State 169

  111 statement: iteration_statement •

    $default  reduce using rule 111 (statement)


State 170

  112 statement: jump_statement •

    $default  reduce using rule 112 (statement)


State 171

   78 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list ASTERISK RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 78 (direct_declarator)


State 172

   74 direct_declarator: direct_declarator LEFT_SQUARE_BRACKET type_qualifier_list assignment_expression RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 74 (direct_declarator)


State 173

   92 parameter_declaration: declaration_specifiers declarator •

    $default  reduce using rule 92 (parameter_declaration)


State 174

   80 direct_declarator: direct_declarator LEFT_PARENTHESES change_scope parameter_type_list RIGHT_PARENTHESES •

    $default  reduce using rule 80 (direct_declarator)


State 175

   54 declaration_specifiers: • type_specifier declaration_specifiers_opt
   55                       | • type_qualifier declaration_specifiers_opt
   62 type_specifier: • VOIDTYPE
   63               | • INTTYPE
   68 type_qualifier: • CONST
   91 parameter_list: parameter_list COMMA • parameter_declaration
   92 parameter_declaration: • declaration_specifiers declarator
   93                      | • declaration_specifiers

    CONST     shift, and go to state 1
    INTTYPE   shift, and go to state 2
    VOIDTYPE  shift, and go to state 3

    declaration_specifiers  go to state 115
    type_specifier          go to state 6
    type_qualifier          go to state 7
    parameter_declaration   go to state 195


State 176

   95 identifier_list: identifier_list COMMA IDENTIFIER •

    $default  reduce using rule 95 (identifier_list)


State 177

   49 expression: expression COMMA assignment_expression •

    $default  reduce using rule 49 (expression)


State 178

   10 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET • initialiser_list RIGHT_CURLY_BRACKET
   11                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET • initialiser_list COMMA RIGHT_CURLY_BRACKET
  100 initialiser_list: • designation_opt initialiser
  101                 | • initialiser_list COMMA designation_opt initialiser
  102 designation_opt: • designation
  103                | ε •  [ADDRESS, IDENTIFIER, INTEGER_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, EXCLAMATION]
  104 designation: • designator_list ASSIGNMENT
  105 designator_list: • designator
  106                | • designator_list designator
  107 designator: • LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET

    LEFT_SQUARE_BRACKET  shift, and go to state 83

    $default  reduce using rule 103 (designation_opt)

    initialiser_list  go to state 196
    designation_opt   go to state 85
    designation       go to state 86
    designator_list   go to state 87
    designator        go to state 88


State 179

  107 designator: LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 107 (designator)


State 180

   99 initialiser: LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET •

    $default  reduce using rule 99 (initialiser)


State 181

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   97 initialiser: • assignment_expression
   98            | • LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   99            | • LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
  101 initialiser_list: initialiser_list COMMA designation_opt • initialiser

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    LEFT_CURLY_BRACKET  shift, and go to state 50
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 66
    initialiser                go to state 197


State 182

    7 postfix_expression: postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET •

    $default  reduce using rule 7 (postfix_expression)


State 183

    8 postfix_expression: postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES •

    $default  reduce using rule 8 (postfix_expression)


State 184

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   15 argument_expression_list: argument_expression_list COMMA • assignment_expression
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 198


State 185

   36 equality_expression: equality_expression • EQUALS relational_expression
   37                    | equality_expression • NOT_EQUALS relational_expression
   41 logical_AND_expression: logical_AND_expression LOGICAL_AND M equality_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, LOGICAL_AND, LOGICAL_OR]

    EQUALS      shift, and go to state 103
    NOT_EQUALS  shift, and go to state 104

    $default  reduce using rule 41 (logical_AND_expression)


State 186

   41 logical_AND_expression: logical_AND_expression • LOGICAL_AND M equality_expression
   43 logical_OR_expression: logical_OR_expression LOGICAL_OR M logical_AND_expression •  [QUESTION_MARK, COMMA, RIGHT_SQUARE_BRACKET, RIGHT_CURLY_BRACKET, COLON, SEMI_COLON, RIGHT_PARENTHESES, LOGICAL_OR]

    LOGICAL_AND  shift, and go to state 105

    $default  reduce using rule 43 (logical_OR_expression)


State 187

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   45                       | logical_OR_expression N QUESTION_MARK M • expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   48 expression: • assignment_expression
   49           | • expression COMMA assignment_expression

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 77
    expression                 go to state 199


State 188

  113 compound_statement: BEGIN block_item_list_opt • END

    END  shift, and go to state 200


State 189

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   48 expression: • assignment_expression
   49           | • expression COMMA assignment_expression
   51 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   54 declaration_specifiers: • type_specifier declaration_specifiers_opt
   55                       | • type_qualifier declaration_specifiers_opt
   62 type_specifier: • VOIDTYPE
   63               | • INTTYPE
   68 type_qualifier: • CONST
  121 expression_opt: • expression
  122               | ε •  [SEMI_COLON]
  125 iteration_statement: FOR LEFT_PARENTHESES • expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  126                    | FOR LEFT_PARENTHESES • declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement

    CONST               shift, and go to state 1
    ADDRESS             shift, and go to state 44
    INTTYPE             shift, and go to state 2
    VOIDTYPE            shift, and go to state 3
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    $default  reduce using rule 122 (expression_opt)

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 77
    expression                 go to state 159
    declaration                go to state 201
    declaration_specifiers     go to state 33
    type_specifier             go to state 6
    type_qualifier             go to state 7
    expression_opt             go to state 202


State 190

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   48 expression: • assignment_expression
   49           | • expression COMMA assignment_expression
  123 selection_statement: IF LEFT_PARENTHESES • expression RIGHT_PARENTHESES M statement N
  124                    | IF LEFT_PARENTHESES • expression RIGHT_PARENTHESES M statement N ELSE M statement

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 77
    expression                 go to state 203


State 191

  127 jump_statement: RETURN expression_opt • SEMI_COLON

    SEMI_COLON  shift, and go to state 204


State 192

  132 function_definition: declaration_specifiers declarator declaration_list_opt change_scope LEFT_CURLY_BRACKET block_item_list_opt RIGHT_CURLY_BRACKET •

    $default  reduce using rule 132 (function_definition)


State 193

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   48 expression: • assignment_expression
   49           | • expression COMMA assignment_expression
   51 declaration: • declaration_specifiers init_declarator_list_opt SEMI_COLON
   54 declaration_specifiers: • type_specifier declaration_specifiers_opt
   55                       | • type_qualifier declaration_specifiers_opt
   62 type_specifier: • VOIDTYPE
   63               | • INTTYPE
   68 type_qualifier: • CONST
  108 statement: • compound_statement
  109          | • expression_statement
  110          | • selection_statement
  111          | • iteration_statement
  112          | • jump_statement
  113 compound_statement: • BEGIN block_item_list_opt END
  117 block_item_list: block_item_list M • block_item
  118 block_item: • declaration
  119           | • statement
  120 expression_statement: • expression_opt SEMI_COLON
  121 expression_opt: • expression
  122               | ε •  [SEMI_COLON]
  123 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  124                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  125 iteration_statement: • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  126                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  127 jump_statement: • RETURN expression_opt SEMI_COLON

    BEGIN               shift, and go to state 155
    CONST               shift, and go to state 1
    FOR                 shift, and go to state 156
    IF                  shift, and go to state 157
    ADDRESS             shift, and go to state 44
    INTTYPE             shift, and go to state 2
    RETURN              shift, and go to state 158
    VOIDTYPE            shift, and go to state 3
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    $default  reduce using rule 122 (expression_opt)

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 77
    expression                 go to state 159
    declaration                go to state 160
    declaration_specifiers     go to state 33
    type_specifier             go to state 6
    type_qualifier             go to state 7
    statement                  go to state 161
    compound_statement         go to state 162
    block_item                 go to state 205
    expression_statement       go to state 166
    expression_opt             go to state 167
    selection_statement        go to state 168
    iteration_statement        go to state 169
    jump_statement             go to state 170


State 194

  120 expression_statement: expression_opt SEMI_COLON •

    $default  reduce using rule 120 (expression_statement)


State 195

   91 parameter_list: parameter_list COMMA parameter_declaration •

    $default  reduce using rule 91 (parameter_list)


State 196

   10 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list • RIGHT_CURLY_BRACKET
   11                   | LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list • COMMA RIGHT_CURLY_BRACKET
  101 initialiser_list: initialiser_list • COMMA designation_opt initialiser

    COMMA                shift, and go to state 206
    RIGHT_CURLY_BRACKET  shift, and go to state 207


State 197

  101 initialiser_list: initialiser_list COMMA designation_opt initialiser •

    $default  reduce using rule 101 (initialiser_list)


State 198

   15 argument_expression_list: argument_expression_list COMMA assignment_expression •

    $default  reduce using rule 15 (argument_expression_list)


State 199

   39 N: ε •  [COLON]
   45 conditional_expression: logical_OR_expression N QUESTION_MARK M expression • N COLON M conditional_expression
   49 expression: expression • COMMA assignment_expression

    COMMA  shift, and go to state 121

    $default  reduce using rule 39 (N)

    N  go to state 208


State 200

  113 compound_statement: BEGIN block_item_list_opt END •

    $default  reduce using rule 113 (compound_statement)


State 201

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   48 expression: • assignment_expression
   49           | • expression COMMA assignment_expression
  121 expression_opt: • expression
  122               | ε •  [SEMI_COLON]
  126 iteration_statement: FOR LEFT_PARENTHESES declaration • expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    $default  reduce using rule 122 (expression_opt)

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 77
    expression                 go to state 159
    expression_opt             go to state 209


State 202

  125 iteration_statement: FOR LEFT_PARENTHESES expression_opt • SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement

    SEMI_COLON  shift, and go to state 210


State 203

   49 expression: expression • COMMA assignment_expression
  123 selection_statement: IF LEFT_PARENTHESES expression • RIGHT_PARENTHESES M statement N
  124                    | IF LEFT_PARENTHESES expression • RIGHT_PARENTHESES M statement N ELSE M statement

    COMMA              shift, and go to state 121
    RIGHT_PARENTHESES  shift, and go to state 211


State 204

  127 jump_statement: RETURN expression_opt SEMI_COLON •

    $default  reduce using rule 127 (jump_statement)


State 205

  117 block_item_list: block_item_list M block_item •

    $default  reduce using rule 117 (block_item_list)


State 206

   11 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA • RIGHT_CURLY_BRACKET
  101 initialiser_list: initialiser_list COMMA • designation_opt initialiser
  102 designation_opt: • designation
  103                | ε •  [ADDRESS, IDENTIFIER, INTEGER_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, LEFT_PARENTHESES, LEFT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, EXCLAMATION]
  104 designation: • designator_list ASSIGNMENT
  105 designator_list: • designator
  106                | • designator_list designator
  107 designator: • LEFT_SQUARE_BRACKET constant_expression RIGHT_SQUARE_BRACKET

    LEFT_SQUARE_BRACKET  shift, and go to state 83
    RIGHT_CURLY_BRACKET  shift, and go to state 212

    $default  reduce using rule 103 (designation_opt)

    designation_opt  go to state 181
    designation      go to state 86
    designator_list  go to state 87
    designator       go to state 88


State 207

   10 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET •

    $default  reduce using rule 10 (postfix_expression)


State 208

   45 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N • COLON M conditional_expression

    COLON  shift, and go to state 213


State 209

  126 iteration_statement: FOR LEFT_PARENTHESES declaration expression_opt • SEMI_COLON expression_opt RIGHT_PARENTHESES statement

    SEMI_COLON  shift, and go to state 214


State 210

   38 M: ε •
  125 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON • M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement

    $default  reduce using rule 38 (M)

    M  go to state 215


State 211

   38 M: ε •
  123 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES • M statement N
  124                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES • M statement N ELSE M statement

    $default  reduce using rule 38 (M)

    M  go to state 216


State 212

   11 postfix_expression: LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET •

    $default  reduce using rule 11 (postfix_expression)


State 213

   38 M: ε •
   45 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N COLON • M conditional_expression

    $default  reduce using rule 38 (M)

    M  go to state 217


State 214

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   48 expression: • assignment_expression
   49           | • expression COMMA assignment_expression
  121 expression_opt: • expression
  122               | ε •  [RIGHT_PARENTHESES]
  126 iteration_statement: FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON • expression_opt RIGHT_PARENTHESES statement

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    $default  reduce using rule 122 (expression_opt)

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 77
    expression                 go to state 159
    expression_opt             go to state 218


State 215

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   48 expression: • assignment_expression
   49           | • expression COMMA assignment_expression
  121 expression_opt: • expression
  122               | ε •  [SEMI_COLON]
  125 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M • expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    $default  reduce using rule 122 (expression_opt)

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 77
    expression                 go to state 159
    expression_opt             go to state 219


State 216

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   48 expression: • assignment_expression
   49           | • expression COMMA assignment_expression
  108 statement: • compound_statement
  109          | • expression_statement
  110          | • selection_statement
  111          | • iteration_statement
  112          | • jump_statement
  113 compound_statement: • BEGIN block_item_list_opt END
  120 expression_statement: • expression_opt SEMI_COLON
  121 expression_opt: • expression
  122               | ε •  [SEMI_COLON]
  123 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  123                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M • statement N
  124                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  124                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M • statement N ELSE M statement
  125 iteration_statement: • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  126                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  127 jump_statement: • RETURN expression_opt SEMI_COLON

    BEGIN               shift, and go to state 155
    FOR                 shift, and go to state 156
    IF                  shift, and go to state 157
    ADDRESS             shift, and go to state 44
    RETURN              shift, and go to state 158
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    $default  reduce using rule 122 (expression_opt)

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 77
    expression                 go to state 159
    statement                  go to state 220
    compound_statement         go to state 162
    expression_statement       go to state 166
    expression_opt             go to state 167
    selection_statement        go to state 168
    iteration_statement        go to state 169
    jump_statement             go to state 170


State 217

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   45                       | logical_OR_expression N QUESTION_MARK M expression N COLON M • conditional_expression

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 127
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 221


State 218

  126 iteration_statement: FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt • RIGHT_PARENTHESES statement

    RIGHT_PARENTHESES  shift, and go to state 222


State 219

  125 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt • SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement

    SEMI_COLON  shift, and go to state 223


State 220

   39 N: ε •
  123 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement • N
  124                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement • N ELSE M statement

    $default  reduce using rule 39 (N)

    N  go to state 224


State 221

   45 conditional_expression: logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression •

    $default  reduce using rule 45 (conditional_expression)


State 222

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   48 expression: • assignment_expression
   49           | • expression COMMA assignment_expression
  108 statement: • compound_statement
  109          | • expression_statement
  110          | • selection_statement
  111          | • iteration_statement
  112          | • jump_statement
  113 compound_statement: • BEGIN block_item_list_opt END
  120 expression_statement: • expression_opt SEMI_COLON
  121 expression_opt: • expression
  122               | ε •  [SEMI_COLON]
  123 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  124                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  125 iteration_statement: • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  126                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  126                    | FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES • statement
  127 jump_statement: • RETURN expression_opt SEMI_COLON

    BEGIN               shift, and go to state 155
    FOR                 shift, and go to state 156
    IF                  shift, and go to state 157
    ADDRESS             shift, and go to state 44
    RETURN              shift, and go to state 158
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    $default  reduce using rule 122 (expression_opt)

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 77
    expression                 go to state 159
    statement                  go to state 225
    compound_statement         go to state 162
    expression_statement       go to state 166
    expression_opt             go to state 167
    selection_statement        go to state 168
    iteration_statement        go to state 169
    jump_statement             go to state 170


State 223

   38 M: ε •
  125 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON • M expression_opt N RIGHT_PARENTHESES M statement

    $default  reduce using rule 38 (M)

    M  go to state 226


State 224

  123 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N •  [BEGIN, END, CONST, FOR, IF, ADDRESS, INTTYPE, RETURN, VOIDTYPE, IDENTIFIER, INTEGER_CONSTANT, CHARACTER_CONSTANT, STRING_LITERAL, LEFT_PARENTHESES, RIGHT_CURLY_BRACKET, ASTERISK, PLUS, MINUS, EXCLAMATION, SEMI_COLON]
  124                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N • ELSE M statement

    ELSE  shift, and go to state 227

    $default  reduce using rule 123 (selection_statement)

    Conflict between rule 123 and token ELSE resolved as shift (%right ELSE).


State 225

  126 iteration_statement: FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement •

    $default  reduce using rule 126 (iteration_statement)


State 226

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   48 expression: • assignment_expression
   49           | • expression COMMA assignment_expression
  121 expression_opt: • expression
  122               | ε •  [RIGHT_PARENTHESES]
  125 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M • expression_opt N RIGHT_PARENTHESES M statement

    ADDRESS             shift, and go to state 44
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    $default  reduce using rule 122 (expression_opt)

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 77
    expression                 go to state 159
    expression_opt             go to state 228


State 227

   38 M: ε •
  124 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE • M statement

    $default  reduce using rule 38 (M)

    M  go to state 229


State 228

   39 N: ε •
  125 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt • N RIGHT_PARENTHESES M statement

    $default  reduce using rule 39 (N)

    N  go to state 230


State 229

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   48 expression: • assignment_expression
   49           | • expression COMMA assignment_expression
  108 statement: • compound_statement
  109          | • expression_statement
  110          | • selection_statement
  111          | • iteration_statement
  112          | • jump_statement
  113 compound_statement: • BEGIN block_item_list_opt END
  120 expression_statement: • expression_opt SEMI_COLON
  121 expression_opt: • expression
  122               | ε •  [SEMI_COLON]
  123 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  124                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  124                    | IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M • statement
  125 iteration_statement: • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  126                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  127 jump_statement: • RETURN expression_opt SEMI_COLON

    BEGIN               shift, and go to state 155
    FOR                 shift, and go to state 156
    IF                  shift, and go to state 157
    ADDRESS             shift, and go to state 44
    RETURN              shift, and go to state 158
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    $default  reduce using rule 122 (expression_opt)

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 77
    expression                 go to state 159
    statement                  go to state 231
    compound_statement         go to state 162
    expression_statement       go to state 166
    expression_opt             go to state 167
    selection_statement        go to state 168
    iteration_statement        go to state 169
    jump_statement             go to state 170


State 230

  125 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N • RIGHT_PARENTHESES M statement

    RIGHT_PARENTHESES  shift, and go to state 232


State 231

  124 selection_statement: IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement •

    $default  reduce using rule 124 (selection_statement)


State 232

   38 M: ε •
  125 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES • M statement

    $default  reduce using rule 38 (M)

    M  go to state 233


State 233

    1 primary_expression: • IDENTIFIER
    2                   | • INTEGER_CONSTANT
    3                   | • CHARACTER_CONSTANT
    4                   | • STRING_LITERAL
    5                   | • LEFT_PARENTHESES expression RIGHT_PARENTHESES
    6 postfix_expression: • primary_expression
    7                   | • postfix_expression LEFT_SQUARE_BRACKET expression RIGHT_SQUARE_BRACKET
    8                   | • postfix_expression LEFT_PARENTHESES argument_expression_list_opt RIGHT_PARENTHESES
    9                   | • postfix_expression ARROW IDENTIFIER
   10                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list RIGHT_CURLY_BRACKET
   11                   | • LEFT_PARENTHESES type_name RIGHT_PARENTHESES LEFT_CURLY_BRACKET initialiser_list COMMA RIGHT_CURLY_BRACKET
   16 unary_expression: • postfix_expression
   17                 | • unary_operator unary_expression
   18 unary_operator: • ASTERISK
   19               | • PLUS
   20               | • MINUS
   21               | • EXCLAMATION
   22               | • ADDRESS
   23 multiplicative_expression: • unary_expression
   24                          | • multiplicative_expression ASTERISK unary_expression
   25                          | • multiplicative_expression SLASH unary_expression
   26                          | • multiplicative_expression MODULO unary_expression
   27 additive_expression: • multiplicative_expression
   28                    | • additive_expression PLUS multiplicative_expression
   29                    | • additive_expression MINUS multiplicative_expression
   30 relational_expression: • additive_expression
   31                      | • relational_expression LESS_THAN additive_expression
   32                      | • relational_expression GREATER_THAN additive_expression
   33                      | • relational_expression LESS_EQUAL_THAN additive_expression
   34                      | • relational_expression GREATER_EQUAL_THAN additive_expression
   35 equality_expression: • relational_expression
   36                    | • equality_expression EQUALS relational_expression
   37                    | • equality_expression NOT_EQUALS relational_expression
   40 logical_AND_expression: • equality_expression
   41                       | • logical_AND_expression LOGICAL_AND M equality_expression
   42 logical_OR_expression: • logical_AND_expression
   43                      | • logical_OR_expression LOGICAL_OR M logical_AND_expression
   44 conditional_expression: • logical_OR_expression
   45                       | • logical_OR_expression N QUESTION_MARK M expression N COLON M conditional_expression
   46 assignment_expression: • conditional_expression
   47                      | • unary_expression ASSIGNMENT assignment_expression
   48 expression: • assignment_expression
   49           | • expression COMMA assignment_expression
  108 statement: • compound_statement
  109          | • expression_statement
  110          | • selection_statement
  111          | • iteration_statement
  112          | • jump_statement
  113 compound_statement: • BEGIN block_item_list_opt END
  120 expression_statement: • expression_opt SEMI_COLON
  121 expression_opt: • expression
  122               | ε •  [SEMI_COLON]
  123 selection_statement: • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N
  124                    | • IF LEFT_PARENTHESES expression RIGHT_PARENTHESES M statement N ELSE M statement
  125 iteration_statement: • FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement
  125                    | FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M • statement
  126                    | • FOR LEFT_PARENTHESES declaration expression_opt SEMI_COLON expression_opt RIGHT_PARENTHESES statement
  127 jump_statement: • RETURN expression_opt SEMI_COLON

    BEGIN               shift, and go to state 155
    FOR                 shift, and go to state 156
    IF                  shift, and go to state 157
    ADDRESS             shift, and go to state 44
    RETURN              shift, and go to state 158
    IDENTIFIER          shift, and go to state 45
    INTEGER_CONSTANT    shift, and go to state 46
    CHARACTER_CONSTANT  shift, and go to state 47
    STRING_LITERAL      shift, and go to state 48
    LEFT_PARENTHESES    shift, and go to state 49
    ASTERISK            shift, and go to state 51
    PLUS                shift, and go to state 52
    MINUS               shift, and go to state 53
    EXCLAMATION         shift, and go to state 54

    $default  reduce using rule 122 (expression_opt)

    primary_expression         go to state 55
    postfix_expression         go to state 56
    unary_expression           go to state 57
    unary_operator             go to state 58
    multiplicative_expression  go to state 59
    additive_expression        go to state 60
    relational_expression      go to state 61
    equality_expression        go to state 62
    logical_AND_expression     go to state 63
    logical_OR_expression      go to state 64
    conditional_expression     go to state 65
    assignment_expression      go to state 77
    expression                 go to state 159
    statement                  go to state 234
    compound_statement         go to state 162
    expression_statement       go to state 166
    expression_opt             go to state 167
    selection_statement        go to state 168
    iteration_statement        go to state 169
    jump_statement             go to state 170


State 234

  125 iteration_statement: FOR LEFT_PARENTHESES expression_opt SEMI_COLON M expression_opt SEMI_COLON M expression_opt N RIGHT_PARENTHESES M statement •

    $default  reduce using rule 125 (iteration_statement)
