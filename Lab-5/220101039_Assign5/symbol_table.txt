Line		Token Type			Name
----------------------------------------
1       SINGLE_LINE_COMMENT // Find fibonacci by co-recursion
2       KEYWORD             int
2       IDENTIFIER          f_odd
2       PUNCTUATOR          (
2       KEYWORD             int
2       PUNCTUATOR          )
2       PUNCTUATOR          ;
3       KEYWORD             int
3       IDENTIFIER          f_even
3       PUNCTUATOR          (
3       KEYWORD             int
3       PUNCTUATOR          )
3       PUNCTUATOR          ;
4       KEYWORD             int
4       IDENTIFIER          fibonacci
4       PUNCTUATOR          (
4       KEYWORD             int
4       IDENTIFIER          n
4       PUNCTUATOR          )
4       PUNCTUATOR          {
5       KEYWORD             return
5       PUNCTUATOR          (
5       IDENTIFIER          n
5       PUNCTUATOR          %
5       INTEGER_CONSTANT    2
5       PUNCTUATOR          ==
5       INTEGER_CONSTANT    0
5       PUNCTUATOR          )
5       PUNCTUATOR          ?
5       IDENTIFIER          f_even
5       PUNCTUATOR          (
5       IDENTIFIER          n
5       PUNCTUATOR          )
5       PUNCTUATOR          :
5       IDENTIFIER          f_odd
5       PUNCTUATOR          (
5       IDENTIFIER          n
5       PUNCTUATOR          )
5       PUNCTUATOR          ;
6       PUNCTUATOR          }
7       KEYWORD             int
7       IDENTIFIER          f_odd
7       PUNCTUATOR          (
7       KEYWORD             int
7       IDENTIFIER          n
7       PUNCTUATOR          )
7       PUNCTUATOR          {
8       KEYWORD             return
8       PUNCTUATOR          (
8       IDENTIFIER          n
8       PUNCTUATOR          ==
8       INTEGER_CONSTANT    1
8       PUNCTUATOR          )
8       PUNCTUATOR          ?
8       INTEGER_CONSTANT    1
8       PUNCTUATOR          :
8       IDENTIFIER          f_even
8       PUNCTUATOR          (
8       IDENTIFIER          n
8       INTEGER_CONSTANT    -1
8       PUNCTUATOR          )
8       PUNCTUATOR          +
8       IDENTIFIER          f_odd
8       PUNCTUATOR          (
8       IDENTIFIER          n
8       INTEGER_CONSTANT    -2
8       PUNCTUATOR          )
8       PUNCTUATOR          ;
9       PUNCTUATOR          }
10      KEYWORD             int
10      IDENTIFIER          f_even
10      PUNCTUATOR          (
10      KEYWORD             int
10      IDENTIFIER          n
10      PUNCTUATOR          )
10      PUNCTUATOR          {
11      KEYWORD             return
11      PUNCTUATOR          (
11      IDENTIFIER          n
11      PUNCTUATOR          ==
11      INTEGER_CONSTANT    0
11      PUNCTUATOR          )
11      PUNCTUATOR          ?
11      INTEGER_CONSTANT    0
11      PUNCTUATOR          :
11      IDENTIFIER          f_odd
11      PUNCTUATOR          (
11      IDENTIFIER          n
11      INTEGER_CONSTANT    -1
11      PUNCTUATOR          )
11      PUNCTUATOR          +
11      IDENTIFIER          f_even
11      PUNCTUATOR          (
11      IDENTIFIER          n
11      INTEGER_CONSTANT    -2
11      PUNCTUATOR          )
11      PUNCTUATOR          ;
12      PUNCTUATOR          }
13      KEYWORD             int
13      IDENTIFIER          main
13      PUNCTUATOR          (
13      PUNCTUATOR          )
13      PUNCTUATOR          {
14      KEYWORD             int
14      IDENTIFIER          n
14      PUNCTUATOR          =
14      INTEGER_CONSTANT    10
14      PUNCTUATOR          ;
15      KEYWORD             int
15      IDENTIFIER          r
15      PUNCTUATOR          ;
16      IDENTIFIER          r
16      PUNCTUATOR          =
16      IDENTIFIER          fibonacci
16      PUNCTUATOR          (
16      IDENTIFIER          n
16      PUNCTUATOR          )
16      PUNCTUATOR          ;
17      IDENTIFIER          printStr
17      PUNCTUATOR          (
17      STRING_LITERAL      "fibo("
17      PUNCTUATOR          )
17      PUNCTUATOR          ;
18      IDENTIFIER          printInt
18      PUNCTUATOR          (
18      IDENTIFIER          n
18      PUNCTUATOR          )
18      PUNCTUATOR          ;
19      IDENTIFIER          printStr
19      PUNCTUATOR          (
19      STRING_LITERAL      ") = "
19      PUNCTUATOR          )
19      PUNCTUATOR          ;
20      IDENTIFIER          printInt
20      PUNCTUATOR          (
20      IDENTIFIER          r
20      PUNCTUATOR          )
20      PUNCTUATOR          ;
21      KEYWORD             return
21      INTEGER_CONSTANT    0
21      PUNCTUATOR          ;
22      PUNCTUATOR          }
